// See scheme for more options (although it's easier to just use autocomplete for it).
//   https://github.com/neoclide/coc.nvim/blob/master/data/schema.json
{
  // COC OPTIONS

  // Used to show a menu item is a snippet.
  "suggest.snippetIndicator": " ‚ñ∫",
  // Enable preselect feature on Neovim, automatically select first item.
  // "suggest.enablePreselect": true,
  // Trigger completion after InsertEnter.
  "suggest.triggerAfterInsertEnter": true,
  "colors.enable": true,
  // Don't select the first item by default, so that Tab works to select it, and nothing is
  // otherwise selected.
  "suggest.noselect": true,

  // Show the close button in popup window.
  "diagnostic.floatConfig": {
    "close": true
  },

  // Show the close button in popup window.
  "signature.floatConfig": {
    "close": true
  },

  // Show the close button in popup window.
  "hover.floatConfig": {
    "close": true
  },

  "links.tooltip": true,

  // Used in the gutter for errors.
  "diagnostic.errorSign": "‚úñ",
  // Used in the gutter for warnings.
  "diagnostic.warningSign": "‚ö†",
  // Used in the gutter for Info messages.
  "diagnostic.infoSign": "‚Ñπ",
  // Used in the gutter for Info messages.
  "diagnostic.hintSign": "‚Ñπ",

  "dialog.confirmKey": "<cr>",

  // Improve handling of pressing enter inside brackets (`<> {} [] ()`) by
  // adding a new empty line below and moving the cursor to it.
  "coc.preferences.bracketEnterImprove": true,

  // Used in diagnostics lists etc (:h coc-list-mappings).
  "list.insertMappings": {
    // Select all options (use with an action).
    "<C-a>": "do:selectall",
    "<C-r>": "do:refresh",
    "<C-q>": "action:quickfix"
  },
  "codeLens.enable": true,
  // Workaround for https://github.com/fannheyward/coc-rust-analyzer/issues/1112
  "codeLens.position": "eol",
  // Unset this as the python autoformat disagrees with flake8.
  "coc.preferences.formatOnType": true,
  "[rust][json][go]": {
    "coc.preferences.formatOnType": true
  },
  "[bzl][css][go][html][json][jsonc][lua][python][rust][sh][zsh]": {
    "coc.preferences.formatOnSave": true
  },

  "coc.preferences.currentFunctionSymbolAutoUpdate": true,
  // The symbol in the completion menu for words in the current file.
  "coc.source.around.shortcut": "‚Üï",
  // The symbol in the completion menu for words in other open buffers.
  "coc.source.buffer.shortcut": "‚Üî",
  // The symbol in the completion menu for words in other open buffers.
  "coc.source.file.shortcut": "F",
  // üêì üêî Set this for LanguageServer symbol instead of LS once possible.

  // COC EXTENSION OPTIONS
  "python.linting.enabled": false,
  "python.linting.flake8Enabled": true,
  "python.linting.pydocstyleEnabled": false,
  "python.jediEnabled": false,
  "python.formatting.provider": "black",
  // Docs: https://github.com/fannheyward/coc-rust-analyzer#configurations
  "rust-analyzer.check.overrideCommand": [
    "cargo",
    "+nightly",
    "clippy",
    "--workspace",
    "--message-format=json",
    "--all-targets"
  ],
  "rust-analyzer.imports.granularity.group": "crate",
  "rust-analyzer.procMacro.enable": true,
  // Use crate:: style absolute paths by default vs super:: style relative paths.
  "rust-analyzer.imports.prefix": "crate",
  // Use nightly rustfmt, see https://github.com/rust-analyzer/rust-analyzer/issues/3627
  "rust-analyzer.rustfmt.extraArgs": ["+nightly"],
  "rust-analyzer.diagnostics.experimental.enable": true,
  "yaml.format.enable": true,
  "yaml.hover": true,
  "yaml.schemas": {
    "http://json.schemastore.org/gitlab-ci": "/.gitlab-ci.yml",
    // Ansible schema is used by default for everything that has path tasks/*.yaml
    "": "up/tasks/*.yaml"
  },
  "json.schemas": [
    {
      "fileMatch": ["package.json"],
      "url": "http://json.schemastore.org/package"
    }
  ],
  // Configure coc-markdownlint: https://github.com/fannheyward/coc-markdownlint#rules
  // Rules: https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md
  // Example: https://github.com/DavidAnson/markdownlint/blob/main/schema/.markdownlint.jsonc
  "markdownlint.config": {
    // Include default lints.
    "default": true,

    // Disable line length checking.
    "line-length": false,

    // Allow code blocks right next to code. Useful for bullet lists, e.g.:
    // - Item 1
    //     ```shell
    "blanks-around-fences": false,

    // It's okay to have multiple `### Foo` headings in a doc.
    "no-duplicate-heading": false,

    // Allow arbitrary indentation for lists. Don't want to force one indent depth globally.
    "ul-indent": false,

    // MD033/no-inline-html: allow inline html elements in Markdown.
    "no-inline-html": false
  },
  "prettier.disableLanguages": ["markdown"],
  "prettier.trailingComma": "all",
  "solargraph.diagnostics": false,
  "solargraph.formatting": true,
  "solargraph.autoformat": false, // Enable to format while typing.
  // Docs: https://github.com/josa42/coc-lua#lualslua-language-server
  "Lua.diagnostics.globals": [
    "hs", // HammerSpoon global variable.
    "vim" // Vim global variable.
  ],

  /*
   * Diagnostic LanguageServer
   *
   * Makes it easy to use CLI linters/formatters in coc.nvim
   *
   * LanguageServer: https://github.com/iamcco/diagnostic-languageserver
   * coc extension: https://github.com/iamcco/coc-diagnostic
   */

  // Extend default config: https://github.com/iamcco/coc-diagnostic/blob/master/src/config.ts
  "diagnostic-languageserver.mergeConfig": true,
  "diagnostic-languageserver.debug": false,
  "diagnostic-languageserver.trace.server": "off", // "verbose" or "off"

  "diagnostic-languageserver.linters": {
    "buildifier": {
      "command": "buildifier",
      "debounce": 100,
      "args": ["--mode=check", "-"],
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "buildifier",
      "isStderr": true,
      "isStdout": false,
      "formatLines": 1,
      "formatPattern": [
        "[^:]+:(\\d+):(\\d+):(.*)",
        {
          "line": 1,
          "column": 2,
          "message": [3]
        }
      ]
    },
    "check-sieve": {
      "command": "check-sieve",
      "debounce": 100,
      "args": ["%tempfile"],
      "isStderr": true,
      "isStdout": false,
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "check-sieve",
      "formatLines": 5, // Unsure how many lines sieve will output, seems to be about 5.
      "formatPattern": [
        "^Errors found in .+\n\n(.*)\nOn line (\\d+):\n.*",
        {
          "message": [1],
          "line": 2
        }
      ]
    },
    "textidote-md": {
      "command": "textidote",
      "debounce": 500,
      "args": ["--type", "md", "--check", "en", "--output", "singleline", "--no-color"],
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "textidote",
      "formatLines": 1,
      "formatPattern": [
        "\\(L(\\d+)C(\\d+)-L(\\d+)C(\\d+)\\):(.+)\".+\"$",
        {
          "line": 1,
          "column": 2,
          "endLine": 3,
          "endColumn": 4,
          "message": 5
        }
      ]
    },
    "reek": {
      "command": "reek",
      "sourceName": "reek",
      "debounce": 100,
      "args": ["--format", "json", "--force-exclusion", "--stdin-filename", "%filepath"],
      "parseJson": {
        "line": "lines[0]",
        "endLine": "lines[1]",
        "message": "[${smell_type}] ${message}"
      },
      "securities": {
        "undefined": "info"
      }
    },
    "write-good": {
      "command": "write-good",
      "debounce": 100,
      "args": ["--text=%text", "--no-passive", "--no-adverb"],
      "offsetLine": 0,
      "offsetColumn": 1,
      "sourceName": "write-good",
      "formatLines": 1,
      "formatPattern": [
        "(.*)\\s+on\\s+line\\s+(\\d+)\\s+at\\s+column\\s+(\\d+)\\s*$",
        {
          "line": 2,
          "column": 3,
          "message": 1
        }
      ]
    }
  },
  // Default linters: https://github.com/iamcco/diagnostic-languageserver/wiki/Linters
  "diagnostic-languageserver.filetypes": {
    "email": "languagetool",
    "sh": "shellcheck",
    "sieve": "check-sieve",
    "zsh": "zsh",
    "vim": "vint",
    "cpp": "cpplint",
    "html": "tidy",
    "markdown": ["textidote-md", "languagetool"],
    "": ["write-good", "languagetool"], // Things with no specified filetype.
    "text": ["write-good", "languagetool"],
    "gitcommit": ["write-good", "languagetool"],
    "bzl": "buildifier",
    "tex": "textidote",
    "ruby": [] // Disabled as it gives too many errors in projects I don't control.
  },
  "diagnostic-languageserver.formatters": {
    "black": {
      "command": "black",
      "args": ["--quiet", "-"]
    },
    "buildifier-fmt": {
      "command": "buildifier",
      "args": ["--mode=fix"]
    },
    "lua-format": {
      "command": "lua-format",
      // Args: https://github.com/Koihik/LuaFormatter
      "args": [
        "-i",
        // Limit at n columns.
        "--column-limit=120",
        // N spaces per indent.
        "--indent-width=2"
      ]
    },
    "shfmt": {
      "command": "shfmt",
      "args": ["-filename", "%filepath"]
    }
  },
  // Default formatters: https://github.com/iamcco/diagnostic-languageserver/wiki/Formatters
  // Add to formatOnSaveFiletypes above to format on save.
  "diagnostic-languageserver.formatFiletypes": {
    "python": ["black", "isort"],
    "sh": "shfmt",
    "zsh": "shfmt",
    "bzl": "buildifier-fmt",
    "lua": "lua-format",
    "css": "stylelint"
  },

  // CUSTOM LANGUAGE SERVERS
  // (for ones with coc extensions see g:coc_global_extensions in vimrc).
  "languageserver": {
    "dockerfile": {
      "command": "docker-langserver",
      "filetypes": ["Dockerfile"],
      "args": ["--stdio"]
    },
    "bash": {
      "command": "bash-language-server",
      "filetypes": ["sh"],
      "args": ["start"]
    },
    "kotlin": {
      "command": "kotlin-language-server",
      "filetypes": ["kotlin"]
    },
    "swift": {
      "command": "sourcekit-lsp",
      "filetypes": ["swift"]
    },
    "wrk": {
      "command": "wrk-ls",
      "trace.server": "verbose",
      "filetypes": ["*"]
    }
  },
  "java.errors.incompleteClasspath.severity": "ignore",
  // Don't remind me that ultisnips needs python to be installed.
  "snippets.ultisnips.pythonPrompt": false
}
