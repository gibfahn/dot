// See scheme for more options (although it's easier to just use autocomplete for it).
//   https://github.com/neoclide/coc.nvim/blob/master/data/schema.json
{
  // COC OPTIONS

  // Used to show a menu item is a snippet.
  "suggest.snippetIndicator": " ‚ñ∫",
  "suggest.enablePreview": true,
  // Enable preselect feature on Neovim, automatically select first item.
  // "suggest.enablePreselect": true,
  // Input number to select completion, could be wrong when using '<up>' and '<down>' to select complete item.
  "suggest.numberSelect": false,
  // Trigger completion after InsertEnter.
  "suggest.triggerAfterInsertEnter": true,

  // Used in the gutter for errors.
  "diagnostic.errorSign": "‚úñ",
  // Used in the gutter for warnings.
  "diagnostic.warningSign": "‚ö†",
  // Used in the gutter for Info messages.
  "diagnostic.infoSign": "‚Ñπ",
  // Used in the gutter for Info messages.
  "diagnostic.hintSign": "‚Ñπ",

  "dialog.confirmKey": "<cr>",

  // Improve handling of pressing enter inside brackets (`<> {} [] ()`) by
  // adding a new empty line below and moving the cursor to it.
  "coc.preferences.bracketEnterImprove": true,

  // Used in diagnostics lists etc (:h coc-list-mappings).
  "list.insertMappings": {
    // Select all options (use with an action).
    "<C-a>": "do:selectall",
    "<C-r>": "do:refresh",
    "<C-q>": "action:quickfix"
  },
  "codeLens.enable": true,
  "coc.preferences.colorSupport": true,
  // Unset this as the python autoformat disagrees with flake8.
  "coc.preferences.formatOnType": true,
  "coc.preferences.formatOnTypeFiletypes": ["rust", "json", "go"],
  "coc.preferences.formatOnSaveFiletypes": [
    "bzl",
    "css",
    "go",
    "html",
    "json",
    "jsonc",
    "lua",
    "python",
    "rust",
    "sh"
  ],
  "coc.preferences.currentFunctionSymbolAutoUpdate": true,
  // The symbol in the completion menu for words in the current file.
  "coc.source.around.shortcut": "‚Üï",
  // The symbol in the completion menu for words in other open buffers.
  "coc.source.buffer.shortcut": "‚Üî",
  // The symbol in the completion menu for words in other open buffers.
  "coc.source.file.shortcut": "F",
  // üêì üêî Set this for LanguageServer symbol instead of LS once possible.

  // COC EXTENSION OPTIONS
  "python.linting.enabled": false,
  "python.linting.flake8Enabled": true,
  "python.linting.pydocstyleEnabled": false,
  "python.jediEnabled": false,
  "rust-analyzer.checkOnSave.command": "clippy",
  // Use a global target dir for rust-analyzer so that `cargo-watch` doesn't have to wait for it.
  // https://twitter.com/CecileTonglet/status/1362441476203032581
  /* "rust-analyzer.checkOnSave.extraArgs": ["--target-dir", "/Users/gib/.cache/rust-analyzer-target"], */
  "rust-analyzer.cargo.loadOutDirsFromCheck": true,
  "rust-analyzer.procMacro.enable": true,
  "yaml.format.enable": true,
  "yaml.hover": true,
  "yaml.schemas": {
    "https://pages.github.pie.apple.com/dchao3/kw-to-json-schema/resources/rio.schema.json": "/rio.yml",
    "http://json.schemastore.org/gitlab-ci": "/.gitlab-ci.yml"
  },
  "json.schemas": [
    {
      "fileMatch": ["package.json"],
      "url": "http://json.schemastore.org/package"
    }
  ],
  "prettier.disableLanguages": ["markdown"],
  "prettier.trailingComma": "all",
  "solargraph.diagnostics": true,
  "solargraph.formatting": true,
  "solargraph.autoformat": false, // Enable to format while typing.
  "Lua.telemetry.enable": false,
  "Lua.diagnostics.globals": [
    "hs" // HammerSpoon global variable.
  ],

  /*
   * Diagnostic LanguageServer
   *
   * Makes it easy to use CLI linters/formatters in coc.nvim
   *
   * LanguageServer: https://github.com/iamcco/diagnostic-languageserver
   * coc extension: https://github.com/iamcco/coc-diagnostic
   */

  // Extend default config: https://github.com/iamcco/coc-diagnostic/blob/master/src/config.ts
  "diagnostic-languageserver.mergeConfig": true,
  "diagnostic-languageserver.debug": false,
  "diagnostic-languageserver.trace.server": "off", // "verbose" or "off"

  "diagnostic-languageserver.linters": {
    "buildifier": {
      "command": "buildifier",
      "debounce": 100,
      "args": ["--mode=check", "-"],
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "buildifier",
      "isStderr": true,
      "isStdout": false,
      "formatLines": 1,
      "formatPattern": [
        "[^:]+:(\\d+):(\\d+):(.*)",
        {
          "line": 1,
          "column": 2,
          "message": [3]
        }
      ]
    },
    "check-sieve": {
      "command": "check-sieve",
      "debounce": 100,
      "args": ["%tempfile"],
      "isStderr": true,
      "isStdout": false,
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "check-sieve",
      "formatLines": 5, // Unsure how many lines sieve will output, seems to be about 5.
      "formatPattern": [
        "^Errors found in .+\n\n(.*)\nOn line (\\d+):\n.*",
        {
          "message": [1],
          "line": 2
        }
      ]
    },
    "rubocop": {
      "command": "rubocop",
      "sourceName": "rubocop",
      "debounce": 100,
      "args": ["--format", "json", "--force-exclusion", "--stdin", "%filepath"],
      "parseJson": {
        "errorsRoot": "files[0].offenses",
        "line": "location.start_line",
        "endLine": "location.last_line",
        "column": "location.start_column",
        "endColumn": "location.end_column",
        "message": "[${cop_name}] ${message}",
        "security": "severity"
      },
      "securities": {
        "fatal": "error",
        "error": "error",
        "warning": "warning",
        "convention": "info",
        "refactor": "info",
        "info": "info"
      }
    },
    "textidote-md": {
      "command": "textidote",
      "debounce": 500,
      "args": ["--type", "md", "--check", "en", "--output", "singleline", "--no-color"],
      "offsetLine": 0,
      "offsetColumn": 0,
      "sourceName": "textidote",
      "formatLines": 1,
      "formatPattern": [
        "\\(L(\\d+)C(\\d+)-L(\\d+)C(\\d+)\\):(.+)\".+\"$",
        {
          "line": 1,
          "column": 2,
          "endLine": 3,
          "endColumn": 4,
          "message": 5
        }
      ]
    },
    "reek": {
      "command": "reek",
      "sourceName": "reek",
      "debounce": 100,
      "args": ["--format", "json", "--force-exclusion", "--stdin-filename", "%filepath"],
      "parseJson": {
        "line": "lines[0]",
        "endLine": "lines[1]",
        "message": "[${smell_type}] ${message}"
      },
      "securities": {
        "undefined": "info"
      }
    }
  },
  // Default linters: https://github.com/iamcco/diagnostic-languageserver/wiki/Linters
  "diagnostic-languageserver.filetypes": {
    "email": "languagetool",
    "sh": "shellcheck",
    "sieve": "check-sieve",
    "vim": "vint",
    "markdown": ["markdownlint", "textidote-md", "write-good", "languagetool"],
    "": ["write-good", "languagetool"], // Things with no specified filetype.
    "text": ["write-good", "languagetool"],
    "gitcommit": ["write-good", "languagetool"],
    "bzl": "buildifier",
    "tex": "textidote"
    // "ruby": "reek" // Disabled as it gives too many errors in projects I don't control.
  },
  "diagnostic-languageserver.formatters": {
    "black": {
      "command": "black",
      "args": ["--quiet", "-"]
    },
    "buildifier-fmt": {
      "command": "buildifier",
      "args": ["--mode=fix"]
    },
    "shfmt": {
      "command": "shfmt",
      "args": ["-filename", "%filepath"]
    }
  },
  // Default formatters: https://github.com/iamcco/diagnostic-languageserver/wiki/Formatters
  // Add to formatOnSaveFiletypes above to format on save.
  "diagnostic-languageserver.formatFiletypes": {
    "python": ["black", "isort"],
    "sh": "shfmt",
    "bzl": "buildifier-fmt",
    "lua": "lua-format",
    "css": "stylelint"
  },

  // CUSTOM LANGUAGE SERVERS
  // (for ones with coc extensions see g:coc_global_extensions in vimrc).
  "languageserver": {
    "dockerfile": {
      "command": "docker-langserver",
      "filetypes": ["Dockerfile"],
      "args": ["--stdio"]
    },
    "bash": {
      "command": "bash-language-server",
      "filetypes": ["sh"],
      "args": ["start"]
    },
    "kotlin": {
      "command": "kotlin-language-server",
      "filetypes": ["kotlin"]
    },
    "swift": {
      "command": "sourcekit-lsp",
      "filetypes": ["swift"]
    }
  },
  "java.errors.incompleteClasspath.severity": "ignore"
}
