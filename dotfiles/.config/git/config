[absorb]
  # `brew install git-absorb`
  autoStageIfNothingStaged = true # Don't make me `git add`.

[alias]
  # Commits: @=HEAD, -=last commit.
  # N.B. # at end of func allows parsing $1 args.

  # Helper functions where a full name is easier:
  # Change the remote default branch to "$2" (default: "forkmain"), for remote $1 (default: "fork").
  change-branch = "! set -x; fork=${1:-fork} branch=${2:-forkmain} && GH_HOST=$(git remote-host $fork) gh api -XPATCH repos/$(git remote-org-repo $fork) -f name=$(git remote-repo $fork) -f default_branch=$branch --jq .default_branch && git remote set-head --auto $fork #"
  check-pr-branch = "! [[ $(git head-branch) != $(git up-branch) ]] || { printf \"\\033[0;31m  ERROR\\033[0m: Create a new branch before raising PR.\\n\" >&2 && exit 1; } #"
  code-changes = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -${1:-10} #" # Show $1 most changed files.
  default-branch = "!(git symbolic-ref --short refs/remotes/$1/HEAD || { git remote set-head --auto $1 && git symbolic-ref --short refs/remotes/$1/HEAD; }) | sed \"s|^$1/||\" #" # Default branch for remote. `g default-branch up` -> main
  default-remote = "! git remote | grep -x up || git remote | grep -x origin #" # I use up, but automation like brew often uses origin.
  head-branch = symbolic-ref --short HEAD # e.g. main.
  up-remote-branch = "!git rev-parse --abbrev-ref --symbolic-full-name @{u}" # e.g. origin/main.
  up-remote = "!git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d '/' -f 1" # e.g. origin.
  up-branch = "!git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d '/' -f 2-" # e.g. main.
  push-branch = "!git rev-parse --abbrev-ref --symbolic-full-name @{push}" # What would be pushed to, pushRemote/$(git head-branch) if set, else @{u}.
  # Show the status of this branch relative to @{push}.
  push-status = "! push_branch=$(git push-branch 2>/dev/null) || { echo \"No push branch set.\" && exit 0; } \
    ; both=$(git rev-list --left-right --count HEAD...@{push}) \
    ; [[ $both == '0	0' ]] && echo \"Your branch is up to date with push branch $push_branch.\" \
    || echo \"Your branch is ${both%%	*} commit(s) ahead and ${both##*	} commit(s) behind push branch $push_branch.\" #"
  # Quote an alias you want to save here (quotes \ and ", and wraps in "! #" to handle args).
  quote-string = "!read -r l; sed -E -e 's/([\\\"])/\\\\\\1/g' -e 's/(.*)/\"!\\1 #\"/' <<<\"$l\" #"
  remote-org = "!git remote get-url $1 | awk -F ':|/' '{if ($NF) {print $(NF-1)} else {print $(NF-2)}}' #" # Github org for remote. `g remote-org up` -> gibfahn.
  remote-repo = "!git remote get-url $1 | sed -e 's|/$||' -e 's|.*/||' -e 's/.git$//' #" # Github repo for remote. `g remote-repo up` -> dot.
  remote-org-repo = "!echo $(git remote-org $1)/$(git remote-repo $1) #" # Github org/repo for a remote. `g remote-org-repo up` -> gibfahn/dot.
  remote-host = "!git remote get-url ${1:?} | sed -e 's/^git@//' -e 's|https://||' -e 's/:.*//' -e 's|/.*||' #" # Used for setting GH_HOST.
  update-default-branch = "!git remote set-head --auto ${1:-up} && git symbolic-ref --short refs/remotes/${1:-up}/HEAD;  #" # Reset the default branch for a remote.

  a   = add           # Add files to index.
  ap  = add -p        # Adds files in hunks (only add some of the changes you made).
  aa  = add -A        # Adds everything.
  ama = am --abort    # Bail out of an am (apply patch) session.
  amc = am --continue # Include an empty commit as a patch.
  ams = am --skip     # Skip the current commit you're patching.

  b   = branch
  ba  = branch -a # Show all local and remote branches.
  bb  = bisect bad # Start a bisect by finding a good and bad commit and using `g bg` and `g bb` respectively to mark the starting points.
  bd  = branch -D # Delete branch.
  bdd = "!lastBranch=$(git head-branch); git checkout - && [[ $(git head-branch) != $lastBranch ]] || git checkout $(git default-branch $(git default-remote)); git branch -D $lastBranch #" # Delete current branch.
  bg  = bisect good
  # Sorted list of branches.
  # TODO(gib): Fix this to make it look nice (can also use git branch directly).
  bh  = for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(color: 178)%(refname:short)' # Branch history.

  br  = bisect reset
  brs = !git for-each-ref --sort=-committerdate refs/heads/ \
        --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset)|%(objectname:short)|%(color:green)%(committerdate:relative)%(color:reset)' \
        | column -ts '|'
  bs  = bisect
  bss = bisect start
  bsr = "!set -x; good=${1?} bad=${2?} && git bisect reset && git bisect start --first-parent $bad $good && shift 2 && git bisect run \"$@\" #" # git bsr <good> <bad> <cmd args...>
  btu = "!git branch -u ${1:-up/$(git default-branch up)} #" # g btu remote/branch (defaults to up/HEAD).
  btp = "!git config branch.$(git head-branch).pushRemote ${1:-fork} #" # `g btp up` sets push remote for this branch to up, useful when pushing directly to 'up'.
  btpa = "!git config remote.pushDefault $1 #" # Set push remote for all future branches in this repo. Use this when you have a repo you don't want to fork.

  ce  = config --global --edit         # Open this file with $VISUAL.
  c   = commit -v                   # Commit with gpg signing.
  ca  = commit -a -v                # Commit all changed files with gpg.
  cm  = commit --amend -v           # Amend the previous commit.
  cmn = commit --amend --no-edit    # Amend the previous commit but don't change the message.
  # Output Co-authored-by: lines for users who have committed to this repo before.
  cab = "!git log --all --pretty='Co-authored-by: %an <%ae>' | sort -u | fzf # "
  # Fallback that searches the GitHub API for specified username ($1). Useful
  # if they haven't committed to this repo, but many users don't show their
  # emails in their account.
  cabb = "!user=${1?}; GH_HOST=$(git remote-host $(git up-remote)) gh api graphql -f query=\"query { search(type:USER, query: \\\"$user\\\", first: 10) { userCount edges { node { ... on User { name, email, } } } } }\" \
    | jq -r '.data.search.edges[] | \"Co-authored-by: \\(.node.name) <\\(.node.email)>\"' | fzf #"
  can = commit --amend --no-edit -a # Add changed files and commit with the same message.
  caw = "! git commit -a -m \"WIP! at $(date '+%Y-%m-%d %H:%M:%S') on $(hostname)\" \"$@\" #" # work in progress commit to be squashed
  cn  = clean -ffdx                    # Remove anything that's untracked (DANGER).
  cl  = clone --recurse-submodules     # Always include submodules.
  cp  = cherry-pick                    # Apply commit hash(es) to current branch.
  cpa = cherry-pick --abort            # Bail out of cherry-pick.
  cpc = cherry-pick --continue         # Accept current changes and continue to next commit.
  cpq = cherry-pick --quit             # Only undo last commit (that failed) not all of them.
  d   = "!git diff \"${@:-HEAD}\" #"                   # diff of staged and unstaged..
  de  = "!git diff --name-only \"${@:-HEAD}\" | tr '\\n' '\\0' | xargs -0 $VISUAL # " # Open files changed since last commit in editor.
  dni  = diff --no-index
  # Interactively show files in $@, one line per file.
  di = "!set -x; git diff --color=always --stat=1000 --format=\"\" \"${@:-@}\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --bind=\"alt-a:execute(git add {1})+down\" \
    --preview \"git diff ${*:-@} -- \\$(sed -E -e 's/^\\s*([^\\|]*)\\s*\\|.*/\\1/' -e 's/(.*)\\{(.*) => (.*)\\}(.*)/\\1\\2\\4 \\1\\3\\4/' <<< {}) | delta \" \
    | awk '{print $1}' #"
  dn  = "!git diff --name-only \"${@:-HEAD}\" #"                # diff of staged and unstaged file names.
  dp  = diff @{push}                                   # diff between working tree and upstream branch.
  dpn = diff --name-only @{push}                       # diff between working tree and upstream branch file names.
  dps = diff --staged @{push}                          # diff between working tree and upstream branch.
  ds  = diff --staged                                  # Diff of staged files (`git diff` for unstaged).
  dt  = difftool                                       # Nicer way to view diffs in vim.
  du  = diff @{u}                                      # diff between working tree and upstream branch.
  dun = diff --name-only @{u}                          # diff between working tree and upstream branch file names.
  dus = diff --staged @{u}                             # diff between working tree and upstream branch.

  f = fetch            # Git Fetch
  fix = commit --fixup # g fix SHA means rebasing will attach to that SHA.
  # Like commit --amend but for an arbitrary commit (`g fixup @~3.`).
  fixup = "!  hash=$(git rev-parse "$1") \
           && git commit --fixup=$hash ${@:2} \
           && EDITOR=true git rebase -i --autostash --autosquash $hash^ #"

  h = help

  # `l` gives you history of current branch, `la` is all commits in repo, `las` is a shortlist of the important commits, `ll` shows you who and when.
  l   = log --graph --decorate --oneline                                # Graph log.
  la  = log --graph --decorate --oneline --all                          # Graph log of all commits.
  las = log --graph --decorate --oneline --all --simplify-by-decoration # Graph log of tag/branch/labelled commits.
  ll  = log --color --graph --pretty=format:'%C(214)%h%C(reset)%C(196)%d%C(reset) %s %C(35)(%ci)%C(27) <%an>%C(reset)'
  lla = log --color --graph --pretty=format:'%C(214)%h%C(reset)%C(196)%d%C(reset) %s %C(35)(%ci)%C(27) <%an>%C(reset)' --all

  # Setting `core.hooksPath` (to have personal hooks in dotfiles) as I do elsewhere in this file
  # makes git-lfs write its hooks in there. And git doesn't support multiple hook directories. This
  # means if you `git lfs install`, you get lfs setup in your global hooks, thus applied to every
  # repo, which causes errors in e.g. brew repos. Workaround is to locally set core.hooksPath to
  # .git/hooks in the repo's .git/config when you want to use git-lfs in a repo. This unfortunately
  # means your global hooks will no longer apply in this repo.
  lfs-install = "! git config core.hooksPath .git/hooks && git lfs install --local && git lfs fetch && git lfs checkout #" # Set up local git-lfs.

  # Interactive log of $@.
  li = "!git log --graph --color=always --format=\"%C(auto)%h%d %s %C(black)%C(bold)<%an> %ci%C(auto)\" \"$@\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git show --color=always \\\"\\$(grep -oE '[a-f0-9]{7,}' <<< {} | head -1)\\\" | delta \" \
    --bind \"ctrl-o:execute: git shi \\\"\\$(grep -oE '[a-f0-9]{7,}' <<< {} | head -1)\\\"\" \
    | grep -oE '[a-f0-9]{7,}' #"
  lia = li --all
  lpr = "log -s --reverse --format='%h %s%n%n%b%n<br/>%n' @{upstream}..@" # Log to paste into a PR comment.

  ma  = merge --abort
  mb  = "!git merge-base ${1:-main} ${2:-HEAD} ${@:2} #" # Get commit this branch forked from.
  mc  = "!git diff --name-only --diff-filter=U | tr '\\n' '\\0' | xargs -0 $VISUAL -c '/^\\(|||||||\\|=======\\|>>>>>>>\\|<<<<<<<\\)'" # Open merge conflicts in editor.
  mf  = "!git merge --ff-only $@ \
         && git submodule update --recursive --init #" # Update branch from other commit (default upstream) as long as other commit has HEAD as an ancestor.
  mfp = mf @{push} # Merge changes from the @{push} branch (useful when GitHub suggestions have been merged).
  mt  = mergetool # Alternative to `g mc`, `:h vimdiff` in nvim for more info (try `:dif[fupdate]`, `]c`, `do`, `dp`).

  # Checkout next commit towards $1 (defaults to `main`). Opposite of `git checkout @~`. Skips "skipme" commits.
  next = "!git -c advice.detachedHead=false checkout $(git log --reverse --ancestry-path @^..${1:-main} --oneline | grep -v skipme | head -2 | tail -1 | cut -d ' ' -f 1)"

  p   = push                                                              # Push commits to a remote.
  pd  = "!git push -d ${1%%/*} ${1#*/} #"                                 # Delete a remote branch in the form remote/branch.
  pda = "!for i in \"$@\"; do git pd $i; done #"                          # Delete multiple remote branches in the form remote/branch.
  pf  = push --force-with-lease                                           # Better version of push -f.
  pa  = "!curl -nL ${1%.patch}.patch | git am --whitespace=fix # "        # Patch Github PR.
  pap = "!curl -nL ${1%.patch}.patch | git am -3 --whitespace=fix  # "    # Please patch it.
  paw = "!curl -nL ${1%.patch}.patch | git am -3 --whitespace=warn # "    # Patch but don't fix whitespace.
  ppr = "!git check-pr-branch && git push && git pr --markdown # "        # Push and raise PR at the same time.
  pre = pr --edit                                                         # Update the PR description.
  pro = pr --open --markdown                                              # Open the PR pointed to by the current branch.
  prm = "!gh pr view --json=title,url,number \"${1:-$(pbpaste)}\" | jq -r '\":pr-open: [\\(.url | capture(\"^https://.*/(?<repo>[^/]+/[^/]+)/pull/[0-9]+$\") .repo)#\\(.number)](\\(.url)) \\(.title)\"' | tr -d '\n' | pbcopy #" # Get markdown for PR.
  # Push to PR branch, works with the `git-fp` script in this repo.
  ptp = "!set -x; branch=$(git branch --show-current); git push $(git config branch.${branch}.pushRemote) @:$(sed -E 's;^pull/[0-9]+/;;' <<<${branch}) $@ #"
  pt  = "!git push -u $1 $(git head-branch) #"                            # g pt origin sets branch to track up + pushes.
  pl  = pull

  ra  = remote add                                           # Add new remote by url.
  rb  = rebase                                               # Rebase
  rba = rebase --abort                                       # Bail on the rebase session.
  rbc = rebase --continue                                    # Accept the current commit.
  rbs = rebase --skip                                        # Skip current commit you're rebasing on.
  rhu = reset --hard @{u}                                    # Reset hard to the upstream commit.
  rhp = reset --hard @{push}                                 # Reset hard to the push commit.
  rh  = reset --hard                                         # Reset hard (to HEAD by default).
  ri  = rebase -i --autosquash                               # Interactive rebase (defaults to upstream commit @{u}).
  rip = rebase -i --autosquash @{push}                       # Interactive rebase on push branch.
  rim = "!git rebase -i --autosquash $(git merge-base ${1:-main} ${2:-HEAD} ${@:2}) # " # Rebase all commits since you forked the branch.
  rr  = remote rename                                        # Change name of remote `g rr origin up`.
  rs = "!git remote set-url \"$@\" && git remote set-url --push \"$@\" #" # Set both push and fetch remotes.
  rsf = remote set-url                                       # Change fetch URL of remote `g rs up hsg:dot`.
  rsp = remote set-url --push                                # Change push URL of remote (`g rs up hhg:dot && g rsp up hsg:dot` to use https for fetch and ssh for push, which is faster).
  rt  = restore                                              # Restore working tree from ref (git checkout was split into this).
  rtp = restore -p                                           # Selectively undo some of the changes you made.
  rth = "!git checkout $(git default-branch ${1:-up}) #"     # Checkout default branch for remote $1 (default: up).
  rv  = remote -v                                            # Show remotes (with URLs).

  s   = "!git status && git push-status #" # Status including diff from @{push}.
  ss  = status --short --branch
  sh  = show
  she = "!git show --pretty="" --name-only $@ | tr '\\n' '\\0' | xargs -0 $VISUAL #" # Open files changed in last commit in editor.
  shde = "!{ git show --pretty="" --name-only; git diff HEAD --name-only; } | sort | uniq | tr '\\n' '\\0' | xargs -0 $VISUAL #" # Combines `g de` and `g she` files in editor.
  shn = show --pretty="" --name-only # Show names of files changed only.
  # Interactively show files in $@, one line per file.
  shi = "!git show --color=always --stat=1000 --format=\"\" \"${@:-@}\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git show ${@:-@} -- \\$(sed -E -e 's/^\\s*([^\\|]*)\\s*\\|.*/\\1/' -e 's/(.*)\\{(.*) => (.*)\\}(.*)/\\1\\2\\4 \\1\\3\\4/' <<< {}) | delta \" \
    | awk '{print $1}' #"
  st  = stash
  sta = stash --include-untracked # Like `add -A` but with stash.
  # Interactive log of $@.
  sti = "!git stash list --color=always \"$@\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git stash show --patch --color=always \\$(cut -d : -f 1 <<< {}) | delta \" \
    --bind \"ctrl-o:execute: git shi \\$(cut -d : -f 1 <<< {})\" \
    | cut -d : -f 1 #"
  # Git stash with message, uses vipe from moreutils.
  stm = "!git stash push -m \"$(</dev/null vipe)\" #"
  stp = stash pop
  std = stash drop

  sm   = submodule                             # For when you get bored of typing the word "submodule"
  sme  = submodule foreach                     # Run a command in all submodules, e.g. `g sme git status`, can be used recursively.
  # `g smh`: Like git rhh (above), but resets every submodule to upstream commit. Hopefully someone will upstream an easier way at some point.
  smh  = "! git submodule foreach --quiet --recursive 'git reset --quiet --hard && git clean --quiet -fdx' && git submodule sync --quiet --recursive && git submodule update --quiet --init --recursive"
  smi  = submodule update --init --recursive   # Update to main repo upstream branch's submodule versions (make submodules match parent's HEADs).
  smu  = submodule update --remote             # Update submodules to submodule repos latest versions (make submodules match submodule upstream HEADs).

  # Interactively unsubscribe to repos you don't want to follow (faster version of https://github.com/watching).
  # e.g. GH_HOST=github.mycorp.com git unsubscribe
  # Dependencies: `brew install fzf gh`
  # To sort by repo not org, swap the `--key` sort options.
  unsubscribe = "!gh api --paginate user/subscriptions --jq '.[].full_name' | sort --field-separator=/ --key=1 --key=2 | fzf --reverse --multi --track --no-sort | sed 's|.*|repos/&/subscription|' | xargs -t -n 1 -J% gh api --method DELETE % #"
  # Search the github API for a user and return their username.
  user = "!user=${1?}; GH_HOST=$(git remote-host $(git up-remote)) gh api graphql -f query=\"query { search(type:USER, query: \\\"$user\\\", first:10) { userCount edges { node { ... on User { login, name, email, } } } } }\" | jq -r '.data.search.edges[] | .node | \"@\\(.login) - \\(.name)<\\(.email)>\"' | fzf | awk '{print $1}' #"
  # Same, but returns all matches. Useful in vim when wanting to mention people, e.g. `V:!git users "<firstname lastname>"<CR>
  users = "!user=${1?}; GH_HOST=$(git remote-host $(git up-remote)) gh api graphql -f query=\"query { search(type:USER, query: \\\"$user\\\", first:10) { userCount edges { node { ... on User { login, name, email, } } } } }\" | jq -r '.data.search.edges[] | .node | \"@\\(.login) - \\(.name)<\\(.email)>\"' #"

  # `git wa` to check out `main` to `~/tmp/worktrees/<repo name>`, `git wa dev` to check out the `dev` branch instead.
  wa   = "! dir=${2:-~/tmp/worktrees/\"$(basename \"$(git rev-parse --show-toplevel)\")\"}; git worktree add \"$dir\" \"${1:-main}\" && zoxide add \"$dir\" #"
  # `git wr` to clean up a worktree created with `git wa`.
  wr   = "! git worktree remove ${1:-~/tmp/worktrees/\"$(basename \"$(git rev-parse --show-toplevel)\")\"} #"

  # z is fuzzy log (fuzzy search through `git log $*`, za is the same with la (try g sh `g z`).
  z   = "!git l --color=always $* | grep -v '^\\.\\.\\.\\s\\+$' | fzf +s -m --ansi | sed 's/^\\W\\+\\(\\w\\+\\)\\s\\+.*/\\1/' #"
  za  = "!git la --color=always $* | grep -v '^\\.\\.\\.\\s\\+$' | fzf +s -m --ansi | sed 's/^\\W\\+\\(\\w\\+\\)\\s\\+.*/\\1/' #"

[apply]
  whitespace = fix # Fix whitespace when applying patches.

[branch]
  sort = -committerdate # Sort branches by date they were last committed to.

[clone]
  defaultRemoteName = "up"

# Color options: normal, black, red, green, yellow, blue, magenta, cyan, or white (or 0-255).
# Highlight options: bold, dim, ul (underline), blink, and reverse (swap fg and bg).
# Diff colours aren't needed as using delta as a pager.

# Change the colours for `git branch`.
[color "branch"]
  current = 33      # The branch you're currently on.
  local = normal    # Other normal branches.
  remote = 180      # Local-tracking branches for your remotes.
  upstream = 214 ul # No idea what this is (make it orange to find out).
  plain = normal ul # No idea what this is (underline it to find out).

# Change colours for `git status`.
[color "status"]
  localBranch = 27  # Only used in status --short.
  remoteBranch = 27 # Only used in status --short.
  nobranch = red    # IDK when this is used.
  header = 8        # Standard git waffle.
  branch = 27       # Current branch.
  added = 35        # Files added to index (ready to commit).
  changed = 172     # Files not added, but tracked by git.
  untracked = 197   # Files git knows nothing about.
  unmerged = 196    # Files that have conflicts in git rebase.

[commit]
  gpgsign = true # Always sign commits, available since Git 2.0.
  # Use the >8 marker to delimit commit endings.
  # Means '#' lines before the scissors will be included in your commit message.
  cleanup = "scissors"

[core]
  pager = delta # Uses the theme from the BAT_THEME env var.
  # To use git lfs with this, see `lfs-install` in this file.
  hooksPath = "~/.config/git/hooks" # Put global git hooks here.
  # Below is disabled because it doesn't seem to work properly.
  # commentChar = auto # Allow editing commits that didn't use '#' as the comment character.

[credential]
  helper =
  helper = !gh auth git-credential

# To use the macOS keychain for a non-github git instance:
# [credential "https://github.com"]
#  helper = osxkeychain   # Store Git credentials in the macOS keychain.

[diff]
  algorithm = histogram  # Better diffing algorithm.
  colorMoved = zebra     # Highlight moved lines as oldMoved -> newMoved.
  mnemonicPrefix = true  # Use better letters than a/ and b/ in diffs, e.g. (i)ndex, (w)ork tree, (c)ommit, (o)bject
  renames = copies       # Copies count as renames.
  submodule = log        # Show information about submodules in diffs and logs.
  tool = nvimdiff        # Use nvim vimdiff to view diffs (`git difftool`).
  wsErrorHighlight = all # diff and show show whitespace errors.

# Allows you to use tools to generate readable diffs for binary formats.
# These are just for humans to read, and shouldn't be used to send diffs for others to apply.
# See also changes in git attributes file (./attributes).

# Disabled because I don't have this tool installed any more.
# [diff "wasm"]
#   textconv = wasm2wat --enable-all --generate-names # Use wasm2wat to generate readable wasm diffs.

[diff "plist"]
  textconv = plutil -p # Use plutil to generate readable plist diffs.
[diff "jq"]
  textconv = jq . # Use plutil to generate readable plist diffs.

[fetch]
  all = true               # `git fetch` by itself does `git fetch --all`
  fsckObjects = true
  prune = true             # Delete local tracking branches if remote is gone.
  pruneTags = false        # Don't delete local tags if remote is gone (doesn't work with multiple remotes).
  writeCommitGraph = true  # Cache commit graph to speed up graph log / push operations on fetch.

[format]
  pretty = fuller          # Shows author and committer.

[help]
  autocorrect = prompt     # Prompt to autocorrect nonexistent commands after 0.1s.

[init]
  defaultBranch = main     # Use 'main' as the default branch when you `git init`.

[interactive]
  singleKey = true         # Don't require Enter to confirm, e.g. for `git add -p` press y not y⏎.

[log]
  follow = true            # Log tracks file move/rename.
  date = iso               # Display dates as ISO-8601 (`2023-05-25 13:54:51` instead of `Thu May 25 13:54:51 2023`)

[merge]
  conflictstyle = zdiff3   # Show common ancestor in diffs (initially confusing, but very helpful).
  tool = nvimdiff          # Use nvimdiff (see `git help difftool`) to view and fix merge conflicts (instead of `g mc`).

[mergetool]
  hideResolved = true      # Don't show merge conflicts that have already been resolved by git in the mergetool diff.
  keepBackup = false       # Don't save original file with conflict markers with .orig extension.
  prompt = false           # Don't confirm that I want to open the difftool every time.
  writeToTemp = true       # Write temporary BASE, LOCAL, and REMOTE versions of conflicting files to tempdir not worktree.

[protocol]
  version = 2              # https://github.blog/changelog/2018-11-08-git-protocol-v2-support/.

[pull]
  rebase = true            # pull = fetch + rebase, not fetch + merge.

[push]
  default = current        # Only push the branch I'm on (made less dangerous by remote.pushDefault).

[rebase]
  autoSquash = true        # Squash/fixup commits starting with squash!/fixup! + commit subject.
  autoStash = true         # Automatically stash changes before rebasing.
  missingCommitsCheck = warn # Print a warning if a rebase removes commits.
  updateRefs = true        # Allow rebasing a stack of branches at the same time.

[receive]
  fsckObjects = true

[remote]
  pushDefault = fork       # Push to the fork remote unless a pushRemote is specified. Prevents pushing to wrong branch by mistake.

[rerere]
  autoUpdate = true        # Auto-apply the recorded updates to the index.
  enabled = true           # Remember how I resolved the same merge conflict last time.

[submodule]
  fetchJobs = 8            # Number of jobs to fetch when I submodule clone/update.
  recurse = true           # Make everything except clone recurse into submodules.

[stash]
  showPatch = true         # Show the actual diffs in `git stash show`.

[status]
  showStash = true         # Show the number of commits in the stash in `git status` output.
  # Disabled because it means you can't copy paths and use them when not in repo root.
  # relativePaths = true     # Always show relative paths from the repo root.
  submoduleSummary = true  # Show submodule status in `git status`.

[tag]
  sort = "version:refname" # Sort tags by version not just alphabetically.

[transfer]
  fsckObjects = true

# Try `g cl hh:nodejs/node`.
[url "https://bitbucket.org/"]
  insteadOf = bb:

[url "https://github.com/"]
  insteadOf = hh:                 # Hub https.
  # Enable this to use HTTPS instead of SSH.
  # insteadOf = git@github.com:
  # insteadOf = ssh://git@github.com/
[url "git@github.com:"]
  insteadOf = hs:                 # Hub ssh.
[url "https://github.com/gibfahn/"]
  insteadOf = hhg:                # Hub https gibfahn.
[url "git@github.com:gibfahn/"]
  insteadOf = hsg:                # Hub ssh gibfahn.

[url "https://gist.github.com/"]
  insteadOf = gist:

[url "https://gitlab.com/"]
  insteadOf = lh:                 # Lab https.
[url "git@gitlab.com:"]
  insteadOf = ls:                 # Lab ssh.
[url "https://gitlab.com/gib/"]
  insteadOf = lhg:                # Lab https gib.
[url "git@gitlab.com:gib/"]
  insteadOf = lsg:                # Lab ssh gib.

# Personal config for non-work repos.
[include]
  path = ~/.config/git/my-config
  path = ~/.config/git/maintenance.config
  # We want to run wrk maintenance even if not currently in a work directory.
  path = ~/.config/git/maintenance-wrk.config

# Work config for work repos.
[includeIf "gitdir:~/wrk/**"]
  path = ~/.config/git/wrk-config

[includeIf "hasconfig:remote.*.url:**/*apple.com/**"]
  path = ~/.config/git/wrk-config

# Work config for work repos.
[includeIf "gitdir:/Volumes/Shared-Data/**/wrk/**"]
  path = ~/.config/git/wrk-config
