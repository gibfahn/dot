[alias]
  # Commits: @=HEAD, -=last commit.
  # N.B. # at end of func allows parsing $1 args.

  # Helper functions where a full name is easier:
  # Set up a fork the way I like it:
  fork = "! set ${1:-fork} ${2:-oldmaster}; { git remote | grep -q fork || hub fork --remote-name=$1; } && git remote -v && git push $1 @:refs/heads/$2 && git change-branch $1 $2 && git default-branch $1 && git clean-fork $1 $2 #"
  # Change the remote default branch to "$2" (default: "oldmain"), for remote $1 (default: "fork").
  change-branch = "! set ${1:-fork} ${2:-oldmaster}; hub api -XPATCH repos/$(git remote-org $1)/$(git remote-repo $1) -f name=$(git remote-repo $1) -f default_branch=$2 && git remote set-head --auto $1 #"
  check-pr-branch = "! [[ $(git head-branch) != $(git up-branch) ]] || { printf \"\\033[0;31m  ERROR\\033[0m: Create a new branch before raising PR.\\n\" >&2 && exit 1; } #"
  # Removes all branches and tags except "$2" (default: oldmain).
  clean-fork = "! set ${1:-fork} ${2:-oldmaster}; git ls-remote --heads --tags $1 | awk '!/\\^\\{\\}/ && !/refs\\/heads\\/'\"$2\"'/ {print $NF}' | xargs -n ${3:-10} git push --delete $1 && git remote prune $1 #"
  code-changes = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -${1:-10} #" # Show $1 most changed files.
  default-branch = "!(git symbolic-ref --short refs/remotes/$1/HEAD || { git remote set-head --auto $1 && git symbolic-ref --short refs/remotes/$1/HEAD; }) | sed \"s|^$1/||\" #" # Default branch for remote. `g default-branch up` -> master
  head-branch = symbolic-ref --short HEAD # e.g. master.
  up-remote-branch = "!git rev-parse --abbrev-ref --symbolic-full-name @{u}" # e.g. origin/master.
  up-remote = "!git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d '/' -f 1" # e.g. origin.
  up-branch = "!git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d '/' -f 2-" # e.g. master.
  push-branch = "!git rev-parse --abbrev-ref --symbolic-full-name @{push}" # What would be pushed to, pushRemote/$(git head-branch) if set, else @{u}.
  # Show the status of this branch relative to @{push}.
  push-status = "! push_branch=$(git push-branch 2>/dev/null) || { echo \"No push branch set.\" && exit 0; } \
    ; both=$(git rev-list --left-right --count HEAD...@{push}) \
    ; [[ $both == '0	0' ]] && echo \"Your branch is up to date with push branch $push_branch.\" \
    || echo \"Your branch is ${both%%	*} commit(s) ahead and ${both##*	} commit(s) behind push branch $push_branch.\" #"
  # Quote an alias you want to save here (quotes \ and ", and wraps in "! #" to handle args).
  quote-string = "!read -r l; sed -E -e 's/([\\\"])/\\\\\\1/g' -e 's/(.*)/\"!\\1 #\"/' <<<\"$l\" #"
  remote-org = "!git remote get-url $1 | awk -F ':|/' '{if ($NF) {print $(NF-1)} else {print $(NF-2)}}' #" # Github org for remote. `g remote-org up` -> gibfahn.
  remote-repo = "!git remote get-url $1 | sed -e 's|.*/||' -e 's/.git$//' #" # Github repo for remote. `g remote-repo up` -> dot.
  pr-message = "!printf $'\\n\\n---\\n#### Commits _(oldest to newest)_\\n\\n'\"$(git lpr)\" #" # Generates a default PR message.

  a   = add           # Add files to index.
  ap  = add -p        # Adds files in hunks (only add some of the changes you made).
  aa  = add -A        # Adds everything.
  ama = am --abort    # Bail out of an am (apply patch) session.
  amc = am --continue # Include an empty commit as a patch.
  ams = am --skip     # Skip the current commit you're patching.

  b   = branch
  ba  = branch -a # Show all local and remote branches.
  bb  = bisect bad # Start a bisect by finding a good and bad commit and using `g bg` and `g bb` respectively to mark the starting points.
  bd  = branch -D # Delete branch.
  bdd = "!lastBranch=$(git head-branch); git checkout - && [[ $(git head-branch) != $lastBranch ]] || git checkout $(git default-branch up); git branch -D $lastBranch #" # Delete current branch.
  bg  = bisect good
  # Sorted list of branches.
  # TODO(gib): Fix this to make it look nice (can also use git branch directly).
  bh  = for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(color: 178)%(refname:short)' # Branch history.

  br  = bisect reset
  brs = !git for-each-ref --sort=-committerdate refs/heads/ \
        --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset)|%(objectname:short)|%(color:green)%(committerdate:relative)%(color:reset)' \
        | column -ts '|'
  bs  = bisect start
  btu = "!git branch -u ${1:-up/$(git default-branch up)} #" # g btu remote/branch (defaults to up/HEAD).
  btp = "!git config branch.$(git head-branch).pushRemote ${1:-fork} #" # `g btp up` sets push remote for this branch to up, useful when pushing directly to 'up'.

  # I manually specify -S because gpgsign only works with Git 2.x. Also it
  # means that test suites using `git commit` don't break.
  ce  = config --global --edit         # Open this file with $VISUAL.
  c   = commit -S -v                   # Commit with gpg signing.
  ca  = commit -S -a -v                # Commit all changed files with gpg.
  cm  = commit -S --amend -v           # Amend the previous commit.
  cmn = commit -S --amend --no-edit    # Amend the previous commit but don't change the message.
  can = commit -S --amend --no-edit -a # Add changed files and commit with the same message.
  cn  = clean -ffdx                    # Remove anything that's untracked (DANGER).
  cl  = clone --recurse-submodules --origin up # Always include submodules, set default remote to "up".
  cp  = cherry-pick                    # Apply commit hash(es) to current branch.
  cpa = cherry-pick --abort            # Bail out of cherry-pick.
  cpc = cherry-pick --continue         # Accept current changes and continue to next commit.
  cpq = cherry-pick --quit             # Only undo last commit (that failed) not all of them.
  co  = checkout                       # Change to a different commit or reset a file to a commit (e.g. `g co new-feature`).
  cop = checkout -p                    # Selectively undo some of the changes you made.
  cot = checkout -t                    # g cot up/master means checkout master tracking the one in up.
  cu  = "!git checkout -b $1 && git btu ${2:-up/$(git default-branch up)} #" # Create new PR branch $1, pulls from upstream, pushes to fork (due to remote.pushDefault).
  cod = "!git checkout $(git default-branch ${1:-up}) #" # Checkout default branch for remote $1 (default: up).
  d   = "!git diff \"${@:-HEAD}\" #"                   # diff of staged and unstaged..
  de  = "!git diff HEAD --name-only $@ | xargs $VISUAL # " # Open files changed since last commit in editor.
  dni  = diff --no-index
  # Interactively show files in $@, one line per file.
  di = "!git diff --color=always --stat=1000 --format=\"\" \"${@:-@}\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git diff ${@:-@} -- \\$(sed -E -e 's/^\\s*([^\\|]*)\\s*\\|.*/\\1/' -e 's/(.*)\\{(.*) => (.*)\\}(.*)/\\1\\2\\4 \\1\\3\\4/' <<< {}) | delta \" \
    | awk '{print $1}' #"
  dn  = diff HEAD --name-only                          # diff of staged and unstaged file names.
  dp  = diff @{push}                                   # diff between working tree and upstream branch.
  dpn = diff --name-only @{push}                       # diff between working tree and upstream branch file names.
  dps = diff --staged @{push}                          # diff between working tree and upstream branch.
  ds  = diff --staged                                  # Diff of staged files (`git diff` for unstaged).
  dt  = difftool                                       # Nicer way to view diffs in vim.
  du  = diff @{u}                                      # diff between working tree and upstream branch.
  dun = diff --name-only @{u}                          # diff between working tree and upstream branch file names.
  dus = diff --staged @{u}                             # diff between working tree and upstream branch.

  f = fetch            # Fetch one remote.
  fa = fetch --all     # Fetch from all the remotes.
  fix = commit --fixup # g fix SHA means rebasing will attach to that SHA.
  # Like commit --amend but for an arbitrary commit (`g fixup @~3.`).
  fixup = "!  hash=$(git rev-parse "$1") \
           && git commit --fixup=$hash ${@:2} \
           && EDITOR=true git rebase -i --autostash --autosquash $hash^ #"
  # Create/update branch from Github PR, `g fp 657 origin` or `g fp` (Defaults: $1=head-branch, $2=up-remote if $1 not set, else "up").
  fp = "! a=${1:-$(git head-branch)} b=${2:-up}; [[ -z $@ ]] && b=$(git up-remote) \
        ; [[ -z $1 ]] && git checkout --quiet @ \
        ; git fetch --force --update-head-ok $b pull/$a/head:$a \
        && git checkout --quiet $a \
        && git branch --quiet --set-upstream-to=$(git symbolic-ref --short refs/remotes/$b/HEAD) #"

  h = help

  # `l` gives you history of current branch, `la` is all commits in repo, `las` is a shortlist of the important commits, `ll` shows you who and when.
  l   = log --graph --decorate --oneline                                # Graph log.
  la  = log --graph --decorate --oneline --all                          # Graph log of all commits.
  las = log --graph --decorate --oneline --all --simplify-by-decoration # Graph log of tag/branch/labelled commits.
  ll  = log --color --graph --pretty=format:'%C(214)%h%C(reset)%C(196)%d%C(reset) %s %C(35)(%cr)%C(27) <%an>%C(reset)'
  # Interactive log of $@.
  li = "!git log --graph --color=always --format=\"%C(auto)%h%d %s %C(black)%C(bold)<%an> %cr%C(auto)\" \"$@\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git show --color=always \\$(grep -oE '[a-f0-9]{7,}' <<< {} | head -1) | delta \" \
    --bind \"ctrl-o:execute: git shi \\$(grep -oE '[a-f0-9]{7,}' <<< {} | head -1)\" \
    | grep -oE '[a-f0-9]{7,}' #"
  lia = li --all
  # Escape < and > for github markdown, (useful for generating changelogs).
  lpr = "log -s --reverse --format='%h %s%n%n%b%n<br/>%n' @{upstream}..@" # Log to paste into a PR comment.
  changelog  = "! git log --pretty=format:'* %h - %s %n%w(76,4,4)%b%n' --abbrev-commit \"$@\" | perl -0 -p -e 's/(^|[^\\\\])([<>])/\\1\\\\\\2/g ; s/(\\s*\\n)+\\*/\\n\\n*/g' #"

  ma  = merge --abort
  mb  = "!git merge-base ${1:-master} ${2:-HEAD} ${@:2} #" # Get commit this branch forked from.
  mc  = "!echo \"$VISUAL\" | grep -iq vi && c='-c /\\(|||||||\\|=======\\|>>>>>>>\\|<<<<<<<\\)' || c=\"\"; git diff --name-only --diff-filter=U | xargs $VISUAL $c" # Open merge conflicts in editor.
  mf  = "!git merge --ff-only $@ \
         && git submodule update --recursive --init #" # Update branch from other commit (default upstream) as long as other commit has HEAD as an ancestor.
  mfp = mf @{push} # Merge changes from the @{push} branch (useful when GitHub suggestions have been merged).
  mt  = mergetool # Alternative to `g mc`, `:h vimdiff` in nvim for more info (try `:dif[fupdate]`, `]c`, `do`, `dp`).

  # Checkout next commit towards $1 (defaults to `master`). Opposite of `git checkout @~`. Skips "skipme" commits.
  next = "!git -c advice.detachedHead=false checkout $(git log --reverse --ancestry-path @^..${1:-master} --oneline | grep -v skipme | head -2 | tail -1 | cut -d ' ' -f 1)"

  p   = push                                                    # Push commits to a remote.
  pf  = push --force-with-lease                                 # Better version of push -f.
  pa  = "!curl -L ${1%.patch}.patch | git am -S --whitespace=fix # "     # Patch Github PR.
  pap = "!curl -L ${1%.patch}.patch | git am -3 -S --whitespace=fix  # " # Please patch it.
  paw = "!curl -L ${1%.patch}.patch | git am -3 -S --whitespace=warn # " # Patch but don't fix whitespace.
  ppr = "!git check-pr-branch && git push && git pr # "          # Push and raise PR at the same time.
  # Write the PR message based on the PR Template (if defined) and the git commit log.
  prm = "!file=\"$TMPDIR/$(git rev-parse --show-toplevel | sed 's;/;_;g') $(git branch --show-current).md\"; [[ ! -s $file ]] && git pr-message > \"$file\" && cat $(git rev-parse --show-toplevel)/{.github/,,docs/}PULL_REQUEST_TEMPLATE 2>/dev/null >> \"$file\"; $VISUAL \"$file\" >$(tty) <$(tty); echo \"$file\" #"
  pr = "!file=$(git prm); GH_REPO=$(git remote get-url $(git up-remote)) gh pr create --title \"$(head -1 \"$file\")\" --body \"$(tail +3 \"$file\")\" && rm \"$file\" # " # Raise PR against upstream remote/branch (or $1/$2).
  pt  = "!git push -u $1 $(git head-branch) #"                  # g pt origin sets branch to track up + pushes.
  pl  = pull

  ra  = remote add                                           # Add new remote by url.
  rb  = rebase -S                                            # Rebase and gpg sign.
  rba = rebase --abort                                       # Bail on the rebase session.
  rbc = rebase --continue                                    # Accept the current commit.
  rbs = rebase --skip                                        # Skip current commit you're rebasing on.
  rhu = reset --hard @{u}                                    # Reset hard to the upstream commit.
  rhp = reset --hard @{push}                                 # Reset hard to the push commit.
  rh  = reset --hard                                         # Reset hard (to HEAD by default).
  ri  = rebase -i -S --autosquash                            # Interactive rebase (defaults to upstream commit @{u}).
  rip = rebase -i -S --autosquash @{push}                    # Interactive rebase on push branch.
  rim = "!git rebase -i -S --autosquash $(git merge-base ${1:-master} ${2:-HEAD} ${@:2}) # " # Rebase all commits since you forked the branch.
  rr  = remote rename                                        # Change name of remote `g rr origin up`.
  rs  = remote set-url                                       # Change URL of remote `g rs up hsg:dot`.
  rsp = remote set-url --push                                # Change push URL of remote (`g rs up hhg:dot && g rsp up hsg:dot` to use https for fetch and ssh for push, which is faster).
  rv  = remote -v                                            # Show remotes (with URLs).

  s   = "!git status && git push-status #" # Status including diff from @{push}.
  ss  = status --short --branch
  sh  = show
  she = "!git show --pretty="" --name-only $@ | xargs $VISUAL #" # Open files changed in last commit in editor.
  shde = "!{ git show --pretty="" --name-only; git diff HEAD --name-only; } | sort | uniq | xargs $VISUAL #" # Combines `g de` and `g she` files in editor.
  shn = show --pretty="" --name-only # Show names of files changed only.
  # Interactively show files in $@, one line per file.
  shi = "!git show --color=always --stat=1000 --format=\"\" \"${@:-@}\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git show ${@:-@} -- \\$(sed -E -e 's/^\\s*([^\\|]*)\\s*\\|.*/\\1/' -e 's/(.*)\\{(.*) => (.*)\\}(.*)/\\1\\2\\4 \\1\\3\\4/' <<< {}) | delta \" \
    | awk '{print $1}' #"
  st  = stash
  # Interactive log of $@.
  sti = "!git stash list --color=always \"$@\" \
    | fzf --ansi -m --no-sort --reverse --tiebreak=index \
    --preview \"git stash show --patch --color=always \\$(cut -d : -f 1 <<< {}) | delta \" \
    --bind \"ctrl-o:execute: git shi \\$(cut -d : -f 1 <<< {})\" \
    | cut -d : -f 1 #"
  stp = stash pop
  std = stash drop

  sm   = submodule                             # For when you get bored of typing the word "submodule"
  sme  = submodule foreach                     # Run a command in all submodules, e.g. `g sme git status`, can be used recursively.
  # `g smh`: Like git rhh (above), but resets every submodule to upstream commit. Hopefully someone will upstream an easier way at some point.
  smh  = "! git submodule foreach --quiet --recursive 'git reset --quiet --hard && git clean --quiet -fdx' && git submodule sync --quiet --recursive && git submodule update --quiet --init --recursive"
  smi  = submodule update --init --recursive   # Update to main repo upstream branch's submodule versions (make submodules match parent's HEADs).
  smu  = submodule update --remote             # Update submodules to submodule repos latest versions (make submodules match submodule upstream HEADs).

  # git wa </new/path/> <branch_to_checkout>; <do work in /new/path>; git wr </new/path>
  wa   = worktree add
  wr   = worktree remove

  # z is fuzzy log (fuzzy search through `git log $*`, za is the same with la (try g sh `g z`).
  z   = "!git l --color=always $* | grep -v '^\\.\\.\\.\\s\\+$' | fzf +s -m --ansi | sed 's/^\\W\\+\\(\\w\\+\\)\\s\\+.*/\\1/' #"
  za  = "!git la --color=always $* | grep -v '^\\.\\.\\.\\s\\+$' | fzf +s -m --ansi | sed 's/^\\W\\+\\(\\w\\+\\)\\s\\+.*/\\1/' #"

[apply]
  whitespace = fix # Fix whitespace when applying patches.

# Color options: normal, black, red, green, yellow, blue, magenta, cyan, or white (or 0-255).
# Highlight options: bold, dim, ul (underline), blink, and reverse (swap fg and bg).
# Diff colours aren't needed as using delta as a pager.

# Change the colours for `git branch`.
[color "branch"]
  current = 33      # The branch you're currently on.
  local = normal    # Other normal branches.
  remote = 180      # Local-tracking branches for your remotes.
  upstream = 214 ul # No idea what this is (make it orange to find out).
  plain = normal ul # No idea what this is (underline it to find out).

# Change colours for `git status`.
[color "status"]
  localBranch = 27  # Only used in status --short.
  remoteBranch = 27 # Only used in status --short.
  nobranch = red    # IDK when this is used.
  header = 8        # Standard git waffle.
  branch = 27       # Current branch.
  added = 35        # Files added to index (ready to commit).
  changed = 172     # Files not added, but tracked by git.
  untracked = 197   # Files git knows nothing about.
  unmerged = 196    # Files that have conflicts in git rebase.

[commit]
  gpgsign = true # Always sign commits, available since Git 2.0.

[core]
  pager = delta # Uses the theme from the BAT_THEME env var.
  # To use local hooks, run: `git config core.hooksPath .git/hooks`
  hooksPath = "~/.config/git/hooks" # Put global git hooks here.

[credential]
  helper = osxkeychain   # Store Git credentials in the macOS keychain.

[diff]
  wsErrorHighlight = all # diff and show show whitespace errors.
  renames = copies       # Copies count as renames.
  submodule = log        # Show information about submodules in diffs and logs.
  colorMoved = zebra     # Highlight moved lines as oldMoved -> newMoved.
  tool = vimdiff         # Use nvim vimdiff to view diffs (`git difftool`).

# Allows you to use tools to generate readable diffs for binary formats.
# These are just for humans to read, and shouldn't be used to send diffs for others to apply.
# See also changes in git attrbutes file (./attributes).
[diff "wasm"]
  textconv = wasm2wat --enable-all --generate-names # Use wasm2wat to generate readable wasm diffs.
[diff "plist"]
  textconv = plutil -p # Use plutil to generate readable plist diffs.

[fetch]
  prune = true             # Delete local tracking branches if remote is gone.
[format]
  pretty = fuller          # Shows author and committer.
[help]
  autocorrect = 1          # Autocorrect nonexistant commands after 0.1s.
[interactive]
    singleKey = true       # Don't require Enter to confirm, e.g. for `git add -p` press y not y⏎.
[log]
  follow = true            # Log tracks file move/rename.
[merge]
  conflictstyle = diff3    # Show common ancestor in diffs (initially confusing, but very helpful).
  tool = vimdiff           # Use vimdiff (actually neovim's vimdiff) to view and fix merge conflicts (instead of `g mc`).
[mergetool]
  prompt = false           # Don't confirm that I want to open the difftool every time.
[mergetool "vimdiff"]
  cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[protocol]
  version = 2              # https://github.blog/changelog/2018-11-08-git-protocol-v2-support/.
[pull]
  rebase = true            # pull = fetch + rebase, not fetch + merge.
[push]
  default = current        # Only push the branch I'm on (made less dangerous by remote.pushDefault).
[rebase]
  autosquash = true        # Squash/fixup commits starting with squash!/fixup! + commit subject.
  missingCommitsCheck = warn # Print a warning if a rebase removes commits.
[remote]
  pushDefault = fork       # Push to the fork remote unless a pushRemote is specified. Prevents pushing to wrong branch by mistake.
[rerere]
  enabled = true           # Remember how I resolved the same merge conflict last time.
[submodule]
  fetchJobs = 8            # Number of jobs to fetch when I submodule clone/update.
  recurse = true           # Make everything except clone recurse into submodules.
[stash]
  showPatch = true         # Show the actual diffs in `git stash show`.
[status]
  showStash = true         # Show the number of commits in the stash in `git status` output.
  relativePaths = true     # Always show relative paths from the repo root.
  submoduleSummary = true  # Show submodule status in `git status`.

# Try `g cl hh:nodejs/node`.
[url "https://bitbucket.org/"]
  insteadOf = bb:

[url "https://github.com/"]
  insteadOf = hh:                 # Hub https.
[url "git@github.com:"]
  insteadOf = hs:                 # Hub ssh.
[url "https://github.com/gibfahn/"]
  insteadOf = hhg:                # Hub https gibfahn.
[url "git@github.com:gibfahn/"]
  insteadOf = hsg:                # Hub ssh gibfahn.

[url "https://gist.github.com/"]
  insteadOf = gist:

[url "https://gitlab.com/"]
  insteadOf = lh:                 # Lab https.
[url "git@gitlab.com:"]
  insteadOf = ls:                 # Lab ssh.
[url "https://gitlab.com/gib/"]
  insteadOf = lhg:                # Lab https gib.
[url "git@gitlab.com:gib/"]
  insteadOf = lsg:                # Lab ssh gib.

# Personal config for non-work repos.
[include]
  path = ~/.config/git/my-config

# Work config for work repos.
[includeIf "gitdir:~/wrk/**"]
  path = ~/.config/git/wrk-config

# To use hooks in a repo, run:
# `git config core.hooksPath .git/hooks; git lfs install --local`
# [filter "lfs"]
#   required = true
#   clean = git-lfs clean -- %f
#   smudge = git-lfs smudge -- %f
#   process = git-lfs filter-process
