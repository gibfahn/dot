#!/usr/bin/env bash

usage() {
echo "$(tput bold; tput setaf 74)$0 [-h|--help] [-v|--version] [-f|--force] [-q|--quiet]$(tput sgr0)

git branch prune: delete local branches whose commits have already been merged.

Note that it defaults to deleting on enter, hit n to avoid.
"
}

FORCE_PRUNE= QUIET=

while [[ $# != 0 ]]; do
  [[ $1 =~ ^(--help|-h)$ ]] && { usage; exit; }

  [[ $1 =~ ^(--version|-v)$ ]] && { echo "master"; exit; }

  [[ $1 =~ ^(--force|-f)$ ]] && { FORCE_PRUNE=true; shift; }

  [[ $1 =~ ^(--quiet|-q)$ ]] && { QUIET=true; shift; }
done

branches_to_prune=()

log() {
  [[ -z $QUIET ]] && echo "$1" >&2
}

while read -r branch up_branch; do
  # If no remote-tracking branch with the same name in any remote,
  if [[ -z $(for remote in $(git remote); do git rev-parse --verify --quiet "$remote/$branch" ; done) ]] &&
    # and upstream branch exists,
    [[ -n "$up_branch" ]] &&
    # and upstream branch contains all the commits in fork branch.
    ! git cherry -v "$up_branch" "$branch" | grep -q '^+'; then
    # then we should delete the branch.
    branches_to_prune+=("$branch")
  fi
done <<<"$(git for-each-ref refs/heads --format='%(refname:short) %(upstream:short)')"

if [[ ${#branches_to_prune[@]} = 0 ]]; then
  log "Nothing to prune."
  exit 0
fi

if [[ -n $FORCE_PRUNE ]]; then
  log "Deleting branches: ${branches_to_prune[*]}"
else
  # Prompt before deleting.
  echo "Branches to delete: ${branches_to_prune[*]}" >&2
  read -rp "Continue? [Y/n] " choice
  case $choice in
    N|n|no|No|NO) echo "Exiting..."; exit 1 ;;
  esac
fi

git branch -D "${branches_to_prune[@]}"
