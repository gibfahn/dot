#!/usr/bin/env zsh

set -eu

usage() {
echo "$(tput bold; tput setaf 74)$ZSH_ARGZERO [OPTIONS] [pr number] $(tput sgr0)

git fetch pr: fetch and set up a PR branch.

Given no args, force updates the current branch to the relevant PR.

git fp 123    -> Create a branch called '123-<PR branch name>' and set the push and upstream remotes accordingly.
git fp --up-remote up 123 -> Create a branch called '123-<PR branch name>' and set the push and upstream remotes accordingly, looking at remote 'up'.
git fp        -> Update the current branch (assumed to be a PR branch created by this script).
git ptp       -> push to the user's branch (in my git config as an alias).

Creates and assumes local branches of the form <PR Number>-<PR Branch Name>, e.g. 123-myfeaturebranch.

OPTIONS:

--up-remote: name of the remote fetch the PR for, default 'up'

"
}

up_remote=

while [[ $# != 0 ]]; do
  [[ ${1:-} =~ ^(--help|-h)$ ]] && { usage; exit; }

  [[ ${1:-} =~ ^(--version|-v)$ ]] && { echo "main"; exit; }

  [[ ${1:-} =~ ^(--quiet|-q)$ ]] && { QUIET=true; shift; }

  [[ ${1:-} =~ ^(--quiet|-q)$ ]] && { QUIET=true; shift; }

  [[ ${1:-} =~ ^--up-remote$ ]] && { up_remote=$2; shift 2; continue; }

  [[ $# != 0 ]] && { pr_number=$1; shift; continue; }

  [[ $# != 0 ]] && { echo "Too many args"; usage; exit 1; }
done

main() {
  head_branch=$(git branch --show-current)

  if [[ -z ${up_remote:-} ]]; then
    up_remote=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
    up_remote=${up_remote%%/*}
  fi

  if [[ -n ${pr_number:-} ]]; then
    # Assuming new PR checkout.

    # Convert a URL like 'https://github.com/org/repo/pull/485/files' into '485'
    pr_number=$(sed -E 's;.*/([0-9]+)/?(files)?$;\1;' <<<$pr_number)

    # TODO: stop setting this once `gh` gains decent up/push branch recognition.
    export GH_REPO=$(remote_url "$up_remote")
    export GH_HOST=$(remote_host "$up_remote")

    # Checkout PR branch and save its name and remote.
    only_log_failure gh pr checkout $pr_number
    pr_branch=$(git branch --show-current)
    push_remote=$(git config branch.$pr_branch.remote)

    # Switch to better-named branch
    head_branch=$pr_number-$pr_branch
    git switch --quiet -c $head_branch
    git branch --quiet --delete $pr_branch
    git branch --quiet --set-upstream-to=$(git symbolic-ref --short refs/remotes/$up_remote/HEAD)
    git config branch.$head_branch.pushRemote $push_remote
    echo "git-fp: Pull Request ${pr_number} fetched as branch ${head_branch}" >&2
  else
    # Update current branch to latest PR head commit.
    pr_number=${head_branch%%-*}
    pr_branch=${head_branch#*-}
    git fetch --force --update-head-ok $up_remote pull/$pr_number/head:$head_branch
    echo "git-fp: Branch ${head_branch} updated to latest Pull Request ${pr_number}" >&2
  fi
}

only_log_failure() {
  local output rc
  output=$("$@" 2>&1) && true
  rc=$?
  [[ $rc != 0 ]] && echo "Command '$*' failed with exit code $rc, output:
  $output" >&2
  return $rc
}

remote_url() {
  git remote get-url "$1"
}

# Remote hostname, used for setting GH_HOST.
remote_host() {
  git remote get-url ${1:?} | sed -e 's/^git@//' -e 's|https://||' -e 's/:.*//' -e 's|/.*||'
}

main "$@"
