#!/usr/bin/env zsh

set -euo pipefail

autoload -U colors && colors

[[ -z ${DEBUG:-} ]] || set -x

REMOTE_PRIMARY_NAME=${REMOTE_PRIMARY_NAME:-up}
REMOTE_FORK_NAME=${REMOTE_FORK_NAME:-fork}

usage() {
echo "$(tput bold; tput setaf 74)$ZSH_ARGZERO [-h|--help] branch_name [git switch args...] $(tput sgr0)

git sw: switch to a branch, or create it, setting the upstream tracking everything correctly.

If you specify an existing remote branch, then we check it out in detached mode.
If you don't specify a branch, we check out the default branch of the default remote.

ENVIRONMENT VARIABLES:

REMOTE_PRIMARY_NAME:
    Name of the default remote. Usually the upstream remote vs a forked remote.
    Default: up

REMOTE_FORK_NAME:
    Name of the forked remote (fork of the primary remote). Also applied as a prefix to
    any forks of a non-primary remote. e.g. the fork of 'pub' would be 'pubfork'.
    Default: fork
"
}

main() {
  [[ ${1:-} =~ ^(--help|-h)$ ]] && { usage; exit; }
  [[ ${1:-} =~ ^(--version|-v)$ ]] && { echo "main"; exit; }

  # If --detach passed, just run the command directly.
  if (($@[(Ie)-d])) || (($@[(Ie)--detach])); then
    git switch $@
    return
  fi

  # The last argument that doesn't start with `-`
  git_branch_arg=""
  for arg in "$@"; do
    if [[ $arg != -* ]]; then
      git_branch_arg=$arg
    fi
  done

  # `git sw` by itself checks out the default branch of the default remote.
  if [[ $# == 0 ]]; then
    remote_branch=$(default_remote_branch $REMOTE_PRIMARY_NAME)
    git switch ${remote_branch#*/}
    exit
  fi

  local_branch_count=$(git branch --list --no-color | wc -l)
  if (($@[(Ie)-c])) || (($@[(Ie)--create])) || (($@[(Ie)-C])) || (($@[(Ie)--force-create])); then
    # We're explicitly trying to create a new branch.
    created=1
    git switch $@
  elif [[ -z $git_branch_arg ]]; then
    # Didn't find a branch name (e.g. `git sw -`), just run the switch.
    git switch $@
  elif [[ -n $(git branch --no-color --list "$git_branch_arg") ]]; then
    # We're trying to switch to an existing local branch. Use normal `git switch`.
    git switch $@
  elif [[ -n $(git branch --all --no-color --list "$git_branch_arg") ]]; then
    # User is specifying a remote branch directly, so switch to it in detached mode.
    git switch -d $@
  elif [[ -n $(git branch --all --no-color --list "*/$git_branch_arg") ]]; then
    # The branch we're trying to switch to exists in a remote but not locally.
    # Use normal `git switch`, which will use the `--guess` flag.
    created=1
    git switch $@
  else
    # Branch doesn't exist locally or remotely, create it.
    git switch -c $@
  fi
  # If there are more branches now than there were before, we created a branch.
  if [[ $local_branch_count != $(git branch --list --no-color | wc -l) ]]; then
    created=1
  fi

  # If we just created the branch and it's based on a fork branch, then update
  if [[ ${created:-} == 1 ]]; then
    upstream_remote=$(upstream_remote_for_current_branch || echo $REMOTE_FORK_NAME)
    if [[ ${upstream_remote} == *${REMOTE_FORK_NAME}* ]]; then
      new_upstream_remote=$(up_remote_for_fork $upstream_remote)
      git branch -u $(default_remote_branch $new_upstream_remote)
    fi
  fi

}

# Works out the up remote for the specified fork remote. I use `fork` for the fork of `up`,
# otherwise I append `fork`, e.g. `pub` -> `pubfork`.
up_remote_for_fork() {
  if [[ $1 == $REMOTE_FORK_NAME ]]; then
    echo $REMOTE_PRIMARY_NAME
  else
    echo ${1%$REMOTE_FORK_NAME}
  fi
}

# Default branch for remote. `default_branch up` -> up/main
default_remote_branch() {
  git symbolic-ref --short refs/remotes/$1/HEAD || { git remote set-head --auto $1 && git symbolic-ref --short refs/remotes/$1/HEAD; }
}

upstream_remote_for_current_branch() {
  git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d '/' -f 1
}

# Usage: exit message [rc]
error() {
  echo -e "${fg[red]}Error:${reset_color} $1" >&2
  exit "${2:-1}"
}

main $@
