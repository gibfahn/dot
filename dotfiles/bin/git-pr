#!/usr/bin/env zsh

set -euo pipefail

autoload -U colors && colors

usage() {
  setopt local_options posix_argzero
  echo "$(tput bold; tput setaf 74)$ZSH_ARGZERO [-h|--help] [-v|--version] [-e|--edit] $(tput sgr0)

$(tput bold)git pull request$(tput sgr0)

Raise PR from @{push} against @{upstream}.
See this post for the @{push} and @{upstream} workflow:
https://fahn.co/posts/a-better-pull-request-workflow-with-git-push-branches.html

OPTIONS:

--help: prints this help message

--version: prints the script version

--edit: update an existing pull request body

--open: opens the pull request URL for the current branch in the browser

--markdown: instead of copying just the URL, copy a markdown snippet suitable for pasting into Slack.

--draft: creates a draft pull request (only applies when creating a new PR)
"
}

if [[ -n ${DEBUG:-} ]]; then
  set -x
fi

action=create

while [[ $# != 0 ]]; do
  [[ ${1:-} =~ ^(--help|-h)$ ]] && { usage; exit; }

  [[ ${1:-} =~ ^(--version|-v)$ ]] && { echo "main"; exit; }

  [[ ${1:-} =~ ^(--edit|-e)$ ]] && { action=edit; shift; }

  [[ ${1:-} =~ ^(--open|-o)$ ]] && { action=open; shift; }

  [[ ${1:-} =~ ^(--draft|-d)$ ]] && {draft=true; shift; }

  [[ ${1:-} =~ ^(--markdown|-m)$ ]] && {markdown=true; shift; }
done

main() {
  up_ref=$(branch_ref "@{upstream}") # e.g. up/main
  up_remote=${up_ref%%/*} # e.g. up
  up_branch=${up_ref#*/} # e.g. main
  up_org=$(remote_org $up_remote)
  up_repo=$(remote_repo $up_remote)

  commit_count=$(git rev-list --count @{upstream}..@) # Number of commits in PR.

  scissors="# ------------------------ >8 ------------------------"
  scissors_text="
$scissors
# Do not modify or remove the line above.
# Everything below it will be ignored.

"

  # TODO: stop setting this once `gh` gains decent up/push branch recognition.
  export GH_REPO=$(remote_url "$up_remote")
  export GH_HOST=$(remote_host "$up_remote")

  case $action in
    create) pr_create ;;
    edit) pr_edit ;;
    open) pr_open ;;
  esac
}

# Creates a PR with a user-specified commit message.
pr_create() {
  file=$(create_pr_temp_file)

  # Don't write template file if already non-empty.
  if file_empty $file; then
    # Write the PR message file based on the PR Template (if defined) and the git commit log.
    pr_message > "$file"
  fi

  edit_file $file

  gh pr create --repo $up_org/$up_repo \
    --title "$(
      # Remove the leading "# " from the title.
      head -1 "$file" | cut -c 3-
    )" \
    --body "$(tail +3 "$file")" \
    --base "$up_branch" ${draft:+--draft}

  rm $file

  # Now open the PR in the browser.
  pr_open
}

# Lets the user edit the PR's existing commit message.
pr_edit() {
  pr_number=$(get_pr_number)
  old_pr_body=$(gh api --method=GET repos/$up_org/$up_repo/pulls/$pr_number --jq ".body")

  file=$(create_pr_temp_file)

  # Don't write template file if already non-empty.
  if file_empty $file; then
    # Write the old PR body into the file.
    >$file <<<$old_pr_body
    >>$file <<<$scissors_text
    >>$file pr_log
  fi

  edit_file $file

  new_pr_body=$(<$file)
  new_pr_body=${new_pr_body%$scissors*}

  if [[ -z $new_pr_body || $new_pr_body == $old_pr_body ]]; then
    echo "Nothing to do..."
    return
  fi

  # Have to write to files due to https://stackoverflow.com/questions/61322297/
  echo $new_pr_body > $TMPDIR/new_pr_body
  echo $old_pr_body > $TMPDIR/old_pr_body
  git diff --color=always --no-index $TMPDIR/old_pr_body $TMPDIR/new_pr_body && true

  gh pr edit $pr_number --body $new_pr_body

  rm $file
}

pr_open() {
  pr_number=$(get_pr_number)
  if [[ -n ${markdown:-} ]]; then
    gh pr view --json=title,url,number $pr_number | jq -r '":pr-open: [\(.url | capture("^https://.*/(?<repo>[^/]+/[^/]+)/pull/[0-9]+$") .repo)#\(.number)](\(.url)) \(.title)"' | tr -d '\n' | cpy
  else
    gh pr view --json=url --jq=.url $pr_number | tr -d '\n' | cpy
  fi
  gh pr view -w $pr_number
}

get_pr_number() {
  local pr_number push_ref push_remote push_branch push_org

  push_ref=$(branch_ref "@{push}") # e.g. fork/my-pr-branch
  push_remote=${push_ref%%/*} # e.g. push
  push_branch=${push_ref#*/} # e.g. my-pr-branch
  push_org=$(remote_org $push_remote)

  # You should be able to just run this:
  #   gh pr view -w
  # But gh can't detect push branches, e.g. https://github.com/cli/cli/issues/575
  pr_number=$(gh pr list --state=open --limit=1 --head=$push_org:$push_branch --json=number --jq='.[].number')
  # First check open PR branches, then fall back to the most recent closed one.
  [[ $pr_number =~ ^[0-9]+$ ]] || pr_number=$(gh pr list --state=all --limit=1 --head=$push_branch --json=number --jq='.[0].number')
  [[ $pr_number =~ ^[0-9]+$ ]] || error "Failed to get PR number, output: '$pr_number'"
  echo $pr_number
}

branch_ref() {
  git rev-parse --abbrev-ref --symbolic-full-name "$1"
}

remote_url() {
  git remote get-url "$1"
}

# Remote hostname, used for setting GH_HOST.
remote_host() {
  git remote get-url ${1:?} | sed -e 's/^git@//' -e 's|https://||' -e 's/:.*//' -e 's|/.*||'
}

# Github org for remote. `remote_org up` -> gibfahn.
remote_org() {
  git remote get-url $1 | awk -F ':|/' '{if ($NF) {print $(NF-1)} else {print $(NF-2)}}'
}

# Github repo for remote. `remote_repo up` -> dot.
remote_repo() {
  git remote get-url $1 | sed -e 's|/$||' -e 's|.*/||' -e 's/.git$//'
}

# Create a temp file for the PR and return it.
create_pr_temp_file() {
  # /path/to/git/repo @ my/branch -> '/tmp/_path_to_git_repo my_branch.md'
  local file="$TMPDIR/$(git rev-parse --show-toplevel | sed 's;/;_;g') $(git branch --show-current | sed 's;/;_;g').md"
  echo $file
}

# Returns 0 if file is empty.
file_empty() {
  local file=$1
  [[ ! -s $file ]]
}

# Allow user to edit PR message.
edit_file() {
  local file=$1
  ${VISUAL:-$EDITOR} "$file" >$(tty) <$(tty) && true
  local rc=$?
  # If the user exited their editor non-zero, then we should throw away the file as well as
  # erroring.
  if [[ $rc != 0 ]]; then
    rm $file
  fi
  return $rc
}

# Generates a default PR message.
pr_message() {
  local pr_template
  # Use repo's configured pull request template if present.
  # Ignore cat failure if no template exists.
  pr_template=$(cat $(git rev-parse --show-toplevel)/{.github/,,docs/}PULL_REQUEST_TEMPLATE{,.md} 2>/dev/null || true)

  if [[ -n $pr_template ]]; then
    # add gap between template and commits.
    pr_template+="

"
  fi

  if [[ $commit_count != 1 ]]; then
    separator="---

"
  else
    separator=""
  fi

  cat <<EOF
# $(pr_title)

${pr_template}${separator}$(pr_log)
EOF
}

# If there is only one commit, use its subject line as the PR title.
pr_title() {
  if [[ $commit_count == 1 ]]; then
     git log -1 --format="%s" && echo
  fi
}

# Log pr commits in a suitable format.
pr_log() {
  if [[ $commit_count == 1 ]]; then
    # Commit body
    format='%b%n'
  else
    # Commit subject
    #
    # Commit body
    #
    # <br/>
    #
    format='%s%n%n%b<br/>%n'
  fi
  git log -s --reverse --format=$format @{upstream}..@
}

# Usage: exit message [rc]
error() {
  echo -e "${fg[red]}Error:${reset_color} $1" >&2
  exit "${2:-1}"
}

# Copy to clipboard.
cpy() {
  case $OSTYPE in
    darwin*) pbcopy $@ ;;
    linux*) xclip -selection clipboard $@ ;;
  esac
}

main "$@"
