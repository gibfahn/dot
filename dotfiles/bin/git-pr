#!/usr/bin/env zsh

set -euo pipefail

autoload -U colors && colors

usage() {
  setopt local_options posix_argzero
  echo "$(tput bold; tput setaf 74)$ZSH_ARGZERO [-h|--help] [-v|--version] [-e|--edit] $(tput sgr0)

$(tput bold)git pull request$(tput sgr0)

Raise PR from @{push} against @{upstream}.
See this post for the @{push} and @{upstream} workflow:
https://fahn.co/posts/a-better-pull-request-workflow-with-git-push-branches.html

OPTIONS:

--help: prints this help message

--version: prints the script version

--edit: updates an existing pull request body after force pushing (to add the new commit range)

--open: opens the pull request URL for the current branch in the browser

--draft: creates a draft pull request (only applies when creating a new PR)
"
}

action=create

while [[ $# != 0 ]]; do
  [[ ${1:-} =~ ^(--help|-h)$ ]] && { usage; exit; }

  [[ ${1:-} =~ ^(--version|-v)$ ]] && { echo "main"; exit; }

  [[ ${1:-} =~ ^(--edit|-e)$ ]] && { action=edit; shift; }

  [[ ${1:-} =~ ^(--open|-o)$ ]] && { action=open; shift; }

  [[ ${1:-} =~ ^(--draft|-d)$ ]] && {draft=true; shift; }
done

main() {
  up_ref=$(branch_ref "@{upstream}") # e.g. up/main
  up_remote=${up_ref%%/*} # e.g. up
  up_branch=${up_ref#*/} # e.g. main
  up_org=$(remote_org $up_remote)
  up_repo=$(remote_repo $up_remote)

  commit_block_title="#### Commits _(oldest to newest)_"

  # TODO: stop setting this once `gh` gains decent up/push branch recognition.
  export GH_REPO=$(remote_url "$up_remote")
  export GH_HOST=$(remote_host "$up_remote")

  # Work around gh regression: https://github.com/cli/cli/issues/7216
  gh repo set-default $up_org/$up_repo

  case $action in
    create) pr_create ;;
    edit) pr_edit ;;
    open) pr_open ;;
  esac

  # Make sure we don't leave the repo with the default, in case this causes future gh commands to
  # silently select the wrong repo for an action.
  gh repo set-default --unset
}

pr_create() {
  file=$(pr_file)
  gh pr create --title "$(head -1 "$file")" --body "$(tail +3 "$file")" --base "$up_branch" ${draft:+--draft}
  rm "$file"

  # Now open the PR in the browser.
  pr_open
}

pr_edit() {
  pr_number=$(get_pr_number)
  old_pr_body=$(gh api --method=GET repos/$up_org/$up_repo/pulls/$pr_number --jq ".body")

  if [[ $old_pr_body != *"$commit_block_title"* ]]; then
    new_pr_body=$(<<<"$old_pr_body" && echo && <<<"$commit_block_title" && echo && pr_log)
  else
    new_pr_body=$(sed "/$commit_block_title/q" <<<"$old_pr_body" && echo && pr_log)
  fi

  if [[ $new_pr_body == $old_pr_body ]]; then
    echo "Nothing to do..."
    return
  fi

  # Have to write to files due to https://stackoverflow.com/questions/61322297/
  echo $new_pr_body > $TMPDIR/new_pr_body
  echo $old_pr_body > $TMPDIR/old_pr_body
  git diff --color=always --no-index $TMPDIR/old_pr_body $TMPDIR/new_pr_body && true

  gh pr edit $pr_number --body "$new_pr_body"
}

pr_open() {
  pr_number=$(get_pr_number)
  gh pr view --json=url --jq=.url $pr_number | tr -d '\n' | cpy
  gh pr view -w $pr_number
}

get_pr_number() {
  local pr_number push_ref push_remote push_branch push_org

  push_ref=$(branch_ref "@{push}") # e.g. fork/my-pr-branch
  push_remote=${push_ref%%/*} # e.g. push
  push_branch=${push_ref#*/} # e.g. my-pr-branch
  push_org=$(remote_org $push_remote)

  # You should be able to just run this:
  #   gh pr view -w
  # But gh can't detect push branches, e.g. https://github.com/cli/cli/issues/575
  pr_number=$(gh pr list --state=open --limit=1 --head=$push_org:$push_branch --json=number --jq='.[].number')
  # First check open PR branches, then fall back to the most recent closed one.
  [[ $pr_number =~ ^[0-9]+$ ]] || pr_number=$(gh pr list --state=all --limit=1 --head=$push_branch --json=number --jq='.[0].number')
  [[ $pr_number =~ ^[0-9]+$ ]] || error "Failed to get PR number, output: '$pr_number'"
  echo $pr_number
}

branch_ref() {
  git rev-parse --abbrev-ref --symbolic-full-name "$1"
}

remote_url() {
  git remote get-url "$1"
}

# Remote hostname, used for setting GH_HOST.
remote_host() {
  git remote get-url ${1:?} | sed -e 's/^git@//' -e 's|https://||' -e 's/:.*//' -e 's|/.*||'
}

# Github org for remote. `remote_org up` -> gibfahn.
remote_org() {
  git remote get-url $1 | awk -F ':|/' '{if ($NF) {print $(NF-1)} else {print $(NF-2)}}'
}

# Github repo for remote. `remote_repo up` -> dot.
remote_repo() {
  git remote get-url $1 | sed -e 's|/$||' -e 's|.*/||' -e 's/.git$//'
}

# Write the PR message file based on the PR Template (if defined) and the git commit log.
pr_file() {
  # /path/to/git/repo @ branch -> '/tmp/_path_to_git_repo branch.md'
  file="$TMPDIR/$(git rev-parse --show-toplevel | sed 's;/;_;g') $(git branch --show-current | sed 's;/;_;g').md"

  # Don't write template file if already non-empty.
  if [[ ! -s $file ]]; then
    pr_message > "$file"
  fi
  ${VISUAL:-$EDITOR} "$file" >$(tty) <$(tty)
  echo "$file"
}

# Generates a default PR message.
# The cat will fail if no template exists, that's okay.
pr_message() {
  cat <<EOF
$(pr_title)

$(cat $(git rev-parse --show-toplevel)/{.github/,,docs/}PULL_REQUEST_TEMPLATE{,.md} 2>/dev/null)

---

$commit_block_title

$(pr_log)
EOF
}

pr_title() {
  if [[ $(git rev-list --count @{upstream}..@) == 1 ]]; then
     git log -1 --format="%s"
  fi
}

pr_log() {
  git log -s --reverse --format='%h %s%n%n%b%n<br/>%n' @{upstream}..@
}

# Usage: exit message [rc]
error() {
  # printf "${fg[red]}Error:${reset_color} %s\n" "$1"
  echo -e "${fg[red]}Error:${reset_color} $1"
  exit "${2:-1}"
}

prompt_to_confirm() {
  read "user_input?$1
  Press Enter to continue, type anything or press Ctrl-C to cancel: "
  if [[ -n ${user_input:-} ]]; then
    error "User entered text."
  fi
}

cpy() {
  case $OSTYPE in
    darwin*) pbcopy $@ ;;
    linux*) xclip -selection clipboard $@ ;;
  esac
}

main "$@"
