#!/usr/bin/env bash

set -eu

usage() {
echo "$(tput bold; tput setaf 74)$0 [-h|--help]$(tput sgr0)

Checks for unsaved changes. If this passes the repo is backed up to its git remotes.
"
}

[[ ${1:-} =~ ^(--help|-h)$ ]] && { usage; exit; }

[[ ${1:-} =~ ^(--version|-v)$ ]] && { echo "master"; exit; }

CYAN='\033[0;36m'       # Light blue.
NC='\033[0m' # No Colour.
LF=$'\n'

# Usage: indented_text=$(indent <<<"$text")
indent() {
  # Replace \ with \\ so e.g. literal \n in the output doesn't get read as an escape code.
  # Indent each line by 8 spaces.
  sed -e 's/\\/\\\\/g' -e "s/^/    /"
}

# Check status for $1 dir.
unpushed=""

# Check stash.
stash+=$(git stash list --color=always)
if [[ -n $stash ]]; then
  unpushed+="${CYAN}-> Repo has stashed changes:${NC}$LF"
  unpushed+=$(indent <<<"$stash")$'\n'
fi

# Check uncommitted diffs.
diff+=$(git diff --color=always)
if [[ -n $diff ]]; then
  unpushed+="${CYAN}-> Repo has uncommitted diffs:${NC}$LF"
  unpushed+=$(indent <<<"$diff")$LF
fi

# Check untracked files.
untracked+=$(git ls-files . --exclude-standard --others)
if [[ -n $untracked ]]; then
  unpushed+="${CYAN}-> Repo has untracked files:${NC}$LF"
  unpushed+=$(indent <<<"$untracked")$LF
fi

# Plumbing version of 'git branch'.
for branch in $(git for-each-ref refs/heads/ --format='%(refname:short)'); do
  branch_hash=$(git rev-parse "$branch")

  push_hash=$(git rev-parse "$branch@{push}" 2>/dev/null) && true
  has_push=$?
  upstream_hash=$(git rev-parse "$branch@{upstream}" 2>/dev/null) && true
  has_upstream=$?

  if [[ $has_push == 0 ]]; then
    # What's not in push branch that is in local branch?
    push_delta=$(git cherry -v "$push_hash" "$branch_hash")
    if [[ -n $push_delta ]]; then
      unpushed+="${CYAN}-> $branch has commits not in @{push}:${NC}$LF"
      unpushed+=$(indent <<<"$push_delta")$LF
    fi
  elif [[ $has_upstream == 0 ]]; then
    # What's not in upstream branch that is in local branch?
    upstream_delta=$(git cherry -v "$upstream_hash" "$branch_hash")
    if [[ -n $upstream_delta ]]; then
      unpushed+="${CYAN}-> $branch has commits not in @{upstream}:${NC}$LF"
      unpushed+=$(indent <<<"$upstream_delta\n")
    fi
  else
    unpushed+="${CYAN}-> $branch has no @{upstream} or @{push}${NC}$LF"
  fi
done

if [[ -n "$unpushed" ]]; then
  echo -e "$unpushed$LF"
  exit 1
fi
