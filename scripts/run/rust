#!/usr/bin/env bash

. "$(dirname "$0")"/../../helpers/setup.sh # Load helper script from dot/helpers.

set -euo pipefail

set -x

rust_crates=(
  cargo-expand   # Expand macros and see generated code.
  cargo-sweep    # Clean out old target directories.
  faketty        # Run commands inside a fake tty vs the current terminal's tty.
  proximity-sort # Sort paths by proximity to a directory.
)

linux_rust_crates=(
  bat           # Nicer cat with syntax highlighting etc.
  cargo-nextest # Parallel test runner framework.
  cobalt-bin    # Static site generator (https://cobalt-org.github.io/).
  hyperfine     # Benchmark commands (time but a benchmarking suite).
)

if ! exists rustup || ! exists cargo; then # Install/set up rust.
  # Install rustup. Don't modify path as that's already in zshrc.
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | RUSTUP_HOME="$XDG_DATA_HOME"/rustup CARGO_HOME="$XDG_DATA_HOME"/cargo sh -s -- -y --no-modify-path

  export PATH="$XDG_DATA_HOME/cargo/bin:$PATH"
fi

# Install stable and nightly.
rustup install nightly
rustup install stable # Should be a no-op.

# Install ARM64 Darwin toolchain.
rustup target add x86_64-apple-darwin
rustup target add aarch64-apple-darwin

# Make sure we have useful components:
rustup component add --toolchain stable rust-src clippy rustfmt rust-analyzer
rustup component add --toolchain nightly rust-src clippy rustfmt rust-analyzer

rustup update

# Set default toolchain to stable.
rustup default stable

# If you get libgit2 errors, see <https://github.com/nabijaczleweli/cargo-update/issues/243> and
# run:
#   cargo install cargo-update --force --features vendored-libgit2
exists cargo-install-update || cargo install --features vendored-libgit2 cargo-update

case $(uname) in
  # These are installed and updated through brew on Darwin.
  Linux) rust_crates+=("${linux_rust_crates[@]}") ;;
  # These are installed and updated through brew on Darwin, so remove them from cargo. Otherwise
  # they keep getting updated, even though we're no longer using them.
  Darwin)
    if exists jq; then
      installed_crates=($(jq -r '.installs | keys[] | split(" ")[0]' <"$CARGO_HOME"/.crates2.json))
      for crate in "${linux_rust_crates[@]}"; do
        for installed_crate in "${installed_crates[@]}"; do
          if [[ $crate == "$installed_crate" ]]; then
            cargo uninstall "$crate"
          fi
        done
      done
    fi
    ;;
esac

cargo install-update -ia "${rust_crates[@]}" # Update everything installed with cargo install.

# TODO: work out why this causes frequent rebuilds and re-enable cargo-sweep
# Otherwise this shows that fingerprint files are being deleted by cargo-sweep.
#   CARGO_LOG=cargo::core::compiler::fingerprint=trace cargo build

# Clean up cargo build artifacts from versions of rust that are no longer installed.
# [[ -d "$HOME/wrk" ]] && cargo sweep --installed -r "$HOME/wrk"
# [[ -d "$HOME/code" ]] && cargo sweep --installed -r "$HOME/code"
