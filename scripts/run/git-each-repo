#!/usr/bin/env bash

set -eu

# Things that I want to do to every git repository, every time.

main() {
  # Add repo to my zoxide search path without increasing its score.
  zoxide add --score 0.0 "$PWD"

  [[ $PWD == */wrk/* ]] && config_file=~/.config/git/maintenance-wrk.config || config_file=~/.config/git/maintenance.config

  # Get realpath of current directory.
  current_dir=$(pwd -P)

  # Add git repo to maintenance list to be automatically kept up-to-date.
  if ! grep -qF "$current_dir" "$config_file"; then
    echo "  repo = $current_dir" >>"$config_file"
    if ! grep -qF "$current_dir" "$config_file"; then
      echo "Something went wrong, failed to add '$current_dir' to '$config_file'"
      exit 1
    fi
  fi

  # Sync the remote branch of any fork repo to the upstream.
  # This prevents git pushes to your fork taking a long time if much git history has been pushed since
  # you last pushed fork/forkmain.
  # This assumes that your fork main branch is called `forkmain`, which mine always are.
  for remote in $(git remote | grep fork); do
    if [[ $(git remote get-url "$remote") == *github*gib* ]]; then
      # If this fails with:
      # HTTP 404: Not Found (https://github.com/api/v3/repos/upstream-org/upstream-repo/git/refs/heads/forkmain)
      # Then try it in the UI, that usually fails with "forkmain has commits not in upstream" (which
      # you can fix in the UI by discarding those commits).
      GH_HOST=$(git remote-host "$remote") gh repo sync "$(git remote-org-repo "$remote")" --branch forkmain
    fi
  done

  # Set a default repo if there's an obvious one present. I use `up` as my default upstream repo name,
  # so if it exists it's a good option. We only want to do this for github repos though.
  # stdout is empty for `gh repo set-default --view` when a default hasn't been set.
  if [[ $(git remote get-url up) == *github* ]]; then
    update_if_repo_url_changed
    if [[ -z $(gh repo set-default --view 2>/dev/null) ]]; then
      set_gh_default_repo
    fi
  fi

  # Update repo and prune any merged branches.
  git fetch --all --quiet
  git bp --quiet
  git mf >&/dev/null || true

  # Check for unpushed branches or uncommitted changes.
  git unpushed
}

# If the remote URL changes, e.g. from `https://github.com/oldorg/oldrepo` ->
# `https://github.com/neworg/newrepo`, then we need to update the remote URL, and possibly move the
# repo entirely.
# This needs to be done before `gh repo set-default`, as that errors if the provided URL doesn't
# match the renamed URL.
update_if_repo_url_changed() {
  current_up_url=$(git remote get-url up)
  new_up_url=$(GH_HOST=$(git remote-host up) gh repo view --json url --jq .url "$current_up_url")

  if [[ "${current_up_url%.git}" == "${new_up_url%.git}" ]]; then
    return
  fi

  current_up_org_repo=$(git remote-org-repo up)

  # Update repo URL.
  git remote set-url up "$new_up_url"
  new_up_org_repo=$(git remote-org-repo up)

  # This means that the upstream repo name has changed and we should move it.
  if [[ "$PWD" == *"${current_up_org_repo}" ]]; then
    new_path=${PWD%"/$current_up_org_repo"}/"$new_up_org_repo"
    mkdir -p "$(dirname "$new_path")"
    mv -v "$PWD" "$new_path"
    cd "$new_path"
    echo "Fixed path to updated repo to ${new_path}"
  fi
}

# Set the default repo for gh to work with.
set_gh_default_repo() {
  # We have to set GH_HOST as otherwise if there are two different versions of a repo (e.g.
  # github.com/foo/bar and github.mycorp.com/foo/bar), gh will get confused.
  GH_HOST=$(git remote-host up) gh repo set-default "$(git remote get-url up)"
}

# Usage: exit message [rc]
error() {
  local RED='\033[0;31m' NC='\033[0m'
  echo -e "${RED}Error:${NC} $1"
  exit "${2:-1}"
}

main "$@"
