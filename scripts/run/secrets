#!/usr/bin/env zsh

set -euo pipefail

autoload -U colors && colors

set -x

temp_dir=$(mktemp -dt secrets)

main() {
  local ret_code

  work_done=

  # Should already exist, but just in case.
  if [[ -n ${GNUPGHOME:-} && ! -d ${GNUPGHOME} ]]; then
    work_done=true
    mkdir -p -m 700 ${GNUPGHOME}
  fi

  rm -rf $temp_dir
  mkdir -p $temp_dir

  sync

  ret_code=$?

  if [[ $ret_code != 0 ]]; then
    exit $ret_code
  elif [[ -z ${work_done:-} ]]; then
    exit "$UP_EXIT_CODE_SKIPPED"
  fi
}

sync() {
  whisper_dir=$temp_dir/whisper
  op_dir=$temp_dir/op
  mkdir -p $op_dir

  # Should only exist if we're on a work machine.
  if [[ -d ${wrk_dot_dir:-} ]]; then
    work_machine=true
    . "$wrk_dot_dir"/scripts/run/secrets
    wrk::sync
  else
    work_machine=
  fi

  personal::sync

  check_gpg_keys # Should run after syncing of all gpg keys.

  sync_gh_credentials # Should run after netrc sync.

  add_ssh_keys_to_keychain

  if [[ -n $work_machine ]]; then
    wrk::sync_docker_credentials # Should run after netrc sync.
  fi
}

# {{{ Personal functions

personal::sync() {
  if [[ -z $work_machine ]]; then
    personal::sync_1password_secret "op://JustMe/netrc/.netrc" ~/.netrc
  fi

  # GPG keys
  sync_gpg_key gibfahn@gmail.com - <<<$(op read "op://JustMe/GPG Key - gibfahn/gpg-privkey.asc")

  # SSH Keys
  personal::sync_1password_secret "op://JustMe/SSH Key - gibfahn_id_ed25519/gibfahn_id_ed25519" ~/.ssh/gibfahn_id_ed25519
  personal::sync_1password_secret "op://JustMe/SSH Key - gibfahn_id_ed25519/gibfahn_id_ed25519.pub" ~/.ssh/gibfahn_id_ed25519.pub
  personal::sync_1password_secret "op://JustMe/SSH Key - gibfahn_id_rsa/gibfahn_id_rsa" ~/.ssh/gibfahn_id_rsa
  personal::sync_1password_secret "op://JustMe/SSH Key - gibfahn_id_rsa/gibfahn_id_rsa.pub" ~/.ssh/gibfahn_id_rsa.pub

  # Other credentials
  personal::sync_cargo_credential
}

# Sync a local secret with a 1Password secret.
personal::sync_1password_secret() {
  # <https://developer.1password.com/docs/cli/secret-reference-syntax/>
  local op_secret_ref=$1
  # File to sync.
  local local_file=$2
  shift 2

  local downloaded_file=$op_dir/"$(basename $local_file)"

  op read --out-file $downloaded_file "$op_secret_ref"
  sync_file $downloaded_file $local_file
  if [[ -n $sync_file__file_changed ]]; then
    error "We can't fix this automatically, please update the 1Password file $op_secret_ref to match $local_file"
  fi
}

personal::sync_cargo_credential() {
  op_secret_ref=op://JustMe/Cargo/password
  downloaded_file=$op_dir/cargo-credentials.toml
  local_file=~/.local/share/cargo/credentials.toml

  token=$op_secret_ref op run --no-masking -- /bin/sh -c 'echo "[registry]
token = \"$token\""' >$downloaded_file

  sync_file $downloaded_file $local_file
  if [[ -n $sync_file__file_changed ]]; then
    error "We can't fix this automatically, please update the 1Password file $op_secret_ref to match $local_file"
  fi
}

# }}} Personal functions

# Called when the shell exits (in any circumstances except SIGKILL).
TRAPEXIT() {
  rm -rf $temp_dir
}

# Syncs a path containing a downloaded version of a remote file ($1) to a local file path ($2).
# Sets the `sync_file__file_changed` env var if the remote file was changed by the user.
sync_file() {
  sync_file__file_changed=
  local downloaded_file=$1
  local local_file=$2
  shift 2

  # Remote file missing, error.
  if [[ ! -e $downloaded_file ]]; then
    error "Missing file $downloaded_file"
  fi

  # Local file missing, save it.
  if [[ ! -f $local_file ]]; then
    work_done=true
    mkdir -p "$(dirname $local_file)"
    cp $downloaded_file $local_file
    chmod 600 $local_file
    return 0
  fi

  downloaded_checksum=$(sha256sum $downloaded_file | awk '{print $1}')
  local_checksum=$(sha256sum $local_file | awk '{print $1}')

  # Files identical.
  if [[ "$downloaded_checksum" == "$local_checksum" ]]; then
    return 0
  fi

  # After this point we definitely had to change something.
  work_done=true

  # Files non-identical, and not run interactively, error.
  if [[ ! -t 1 ]]; then
    error "Couldn't sync differing local files for '$local_file'. Please rerun this command interactively and resolve the issue."
  fi

  # Files are non-identical and we're running interactively, so ask user to resolve changes.
  prompt_to_skip "Local and remote files differ, please manually fix the files and commit the changes."
  $VISUAL -d $downloaded_file $local_file

  new_downloaded_checksum=$(sha256sum $downloaded_file | awk '{print $1}')
  new_local_checksum=$(sha256sum $local_file | awk '{print $1}')

  if [[ $downloaded_checksum != $new_downloaded_checksum ]]; then
    sync_file__file_changed=true
  fi
}

# Parses the netrc (very crudely) and extracts the login and password for the given machine.
# Stores the values in env vars `extract_netrc__login` and `extract_netrc__password`.
extract_netrc() {
  unset extract_netrc__login extract_netrc__password
  local machine=$1
  shift

  set +x
  extract_netrc__login=$(grep -w -A 1 "machine $machine" ~/.netrc | tail -1 | awk '{print $NF}')
  extract_netrc__password=$(grep -w -A 2 "machine $machine" ~/.netrc | tail -1 | awk '{print $NF}')
  set -x
}

# Sync uploaded gpg keys from a secret file.
# To get the list of emails already in gpg:
#
sync_gpg_key() {
  email=$1
  file=$2
  shift 2

  gpg --import "$file"
  # Does the following: Type 'trust', 5 (ultimate), y, quit
  # faketty used to stop gpg writing to the tty when we're not running interactively.
  echo -e "5\ny\n" | faketty gpg --command-fd 0 --expert --edit-key "$email" trust
}

# Ensure we have the expected number of gpg keys with ultimate trust.
check_gpg_keys() {
  # TODO(gib): There must be a better way to get the list of emails.
  emails=("${(@f)$(gpg --list-secret-keys | grep ultimate | sed -E 's/.*<(.*)>.*/\1/')}")
  expected_emails=$([[ -n $work_machine ]] && echo 2 || echo 1)
  if (( ${#emails[@]} != "$expected_emails" )); then
    error "Expected two private key emails, found: ${emails[*]}.

    To export the new keys in order to save them:

        gpg --armor --export \$email > pubkey-\$email.asc
        gpg --export-secret-keys -a \$email > privkey-\$email.asc
    " 3
  fi
}

export_gpg_keys() {
  mkdir -p $gpg_dir
}

# These are saved in the keychain, so need to be exported manually.
sync_gh_credentials() {
  if [[ -n $work_machine ]]; then
    githubs=("${(@f)$(sed -n <~/.config/gh/hosts.yml 's/^\([a-z].*\):$/\1/p')}")
  else
    githubs=(github.com)
  fi
  for github_hostname in ${githubs[@]}; do
    extract_netrc $github_hostname
    set +x
    if [[ "$(gh auth token --hostname "$github_hostname")" == $extract_netrc__password ]]; then
      set -x
      continue
    fi
    set -x
    work_done=true
    # To print the existing token run:
    #   gh auth token --hostname $github_hostname
    gh auth login --hostname $github_hostname --with-token <<<$extract_netrc__password
    gh auth status --hostname $github_hostname
  done
}

# Add ssh keys to agent, storing the passphrases in the system keychain.
add_ssh_keys_to_keychain() {
  for key in ~/.ssh/*_id_*; do
    if [[ $key == *.pub ]]; then
      # Skip public keys
      continue
    fi
    if [[ -n $work_machine && $key == *id_ed25519 ]]; then
      continue
    fi

    # Force using a GUI (which will actually probably fail with "no askpass found") if we're not
    # running in interactive terminal mode. This way instead of `ssh-add` prompting for a password it will
    # error.
    if [[ ! -t 1 ]]; then
      export SSH_ASKPASS_REQUIRE=force
    fi

    ssh-add --apple-use-keychain $key
  done
}

log_info() {
    print >&2 "${fg[magenta]}$1${reset_color}"
}

# Prompt user to continue or quit, using $1 as the prompt message.
prompt_to_skip() {
  read "user_input?$1
  Press Enter to continue, type anything or press Ctrl-C to cancel: "
  if [[ -n ${user_input:-} ]]; then
    error "User entered text."
  fi
}

# Usage: exit message [rc]
error() {
  echo -e "${fg[red]}Error:${reset_color} $1" >&2
  exit "${2:-1}"
}

# }}} Utility Functions

main "$@"

# vim: foldmethod=marker
