#!/usr/bin/env bash

. "$(dirname "$0")"/../../helpers/setup.sh # Load helper script from dot/helpers.

set -euo pipefail

set -x

rust_crates=(
  # Not currently used:
  # find_unicode                  # Find unicode.
  # oxipng                        # Compress png images.
  # svgcleaner                    # Remove unnecessary info from svgs.
  # tally                         # Nicer time (shows memory, page faults etc), I'm using hyperfine instead.
  # bingrep        # Grep binary packages.

  cargo-sweep    # Clean out old target directories.
  clog-cli       # Changelog generator.
  proximity-sort # Sort paths by proximity to a directory.
)

linux_rust_crates=(
  # exa
  # watchexec                   # Like entr (evaluating which one is better).
  # xsv                         # csv manipulator.
  bat           # Nicer cat with syntax highlighting etc.
  hyperfine     # Benchmark commands (time but a benchmarking suite).
  cargo-edit    # Gives `cargo {add,rm,upgrade}` commands.
  cargo-nextest # Parallel test runner framework.
  cobalt-bin    # Static site generator (https://cobalt-org.github.io/).
)

case $(uname) in
  # These are installed and updated through brew on Darwin.
  Linux) rust_crates+=("${linux_rust_crates[@]}") ;;
  # These are installed and updated through brew on Darwin, so remove them from cargo. Otherwise
  # they keep getting updated, even though we're no longer using them.
  Darwin)
    if exists jq; then
      installed_crates=($(jq -r '.installs | keys[] | split(" ")[0]' <"$CARGO_HOME"/.crates2.json))
      for crate in "${linux_rust_crates[@]}"; do
        for installed_crate in "${installed_crates[@]}"; do
          if [[ $crate == "$installed_crate" ]]; then
            cargo uninstall "$crate"
          fi
        done
      done
    fi
    ;;
esac

if no rustup || no cargo; then # Install/set up rust.
  # Install rustup. Don't modify path as that's already in gibrc.
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | RUSTUP_HOME="$XDG_DATA_HOME"/rustup CARGO_HOME="$XDG_DATA_HOME"/cargo sh -s -- -y --no-modify-path

  export PATH="$XDG_DATA_HOME/cargo/bin:$PATH"

  # Install stable and nightly.
  rustup install nightly
  rustup install stable # Should be a no-op.

  # Install ARM64 Darwin toolchain.
  rustup target add x86_64-apple-darwin
  rustup target add aarch64-apple-darwin

  # Make sure we have useful components:
  rustup component add --toolchain stable rust-analysis rust-src clippy rustfmt
  rustup component add --toolchain nightly rust-analysis rust-src clippy rustfmt
else
  rustup update
fi

# Set default toolchain to stable.
rustup default stable

not cargo-install-update && cargo install cargo-update
cargo install-update -ia "${rust_crates[@]}" # Update everything installed with cargo install.

# Clean up cargo build artifacts from versions of rust that are no longer installed.
[[ -d "$HOME/wrk" ]] && cargo sweep --installed -r "$HOME/wrk"
[[ -d "$HOME/code" ]] && cargo sweep --installed -r "$HOME/code"
