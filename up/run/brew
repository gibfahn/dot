#!/usr/bin/env zsh

set -ex

# Force color on in brew output, even though not writing to a tty.
export HOMEBREW_COLOR=1

# Install brew and Xcode Command Line Tools.
if ! type brew; then
  # Should only exist if we're on a work machine.
  if [[ -d ${wrk_dot_dir:-} ]]; then
    "$wrk_dot_dir"/up/run/brew
  else
    sudo -v
    { set +x; } 2>/dev/null
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    set -x
  fi
fi

# Install xcode command line tools (should have already been brew installed).
# If these are messed up run `xcode-select -p`. It will normally print one of:
# - /Library/Developer/CommandLineTools
# - /Applications/Xcode.app/Contents/Developer
if ! xcode-select -p &>/dev/null; then
  xcode-select --install
fi

export PATH=/opt/homebrew/bin:/opt/brew/bin:$PATH

# Disable quarantine for casks.
export HOMEBREW_CASK_OPTS=--no-quarantine

# Upgrade everything, even things that weren't in your Brewfile.
brew upgrade # You may occasionally want to run `brew upgrade --greedy` in case built-in cask updaters aren't working.

# brew install things. Edit config/Brewfile to adjust.
brew tap Homebrew/bundle

if [[ $USER == gib ]]; then
  brewfiles=("$XDG_CONFIG_HOME"/brew/*)
else
  brewfiles=("$XDG_CONFIG_HOME"/brew/Brewfile)
fi

if ! brew bundle --file =(cat ${brewfiles[@]}) check >/dev/null; then
  brew bundle --file =(cat ${brewfiles[@]})
fi

# Only run this expensive step if stdout and stderr are ttys (script is being run interactively).
if [[ -t 1 && -t 2 ]]; then
  # Useful to see what you need to add to your Brewfiles.
  echo "Brew packages that would be cleaned up, run this to actually clean:
    brew bundle cleanup --force --file =(cat ${brewfiles[@]})"
  brew bundle cleanup --file =(cat ${brewfiles[@]})
fi
